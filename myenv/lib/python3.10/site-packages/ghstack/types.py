#!/usr/bin/env python3

import dataclasses
from typing import NewType


# This is a decorator that makes a dataclass have a __str__ method that
# only prints out non-default values.  This is useful for debugging.
def override_str_non_defaults(cls):
    def __str__(self):
        """Returns a string containing only the non-default field values."""
        s = ', '.join(f'{field.name}={getattr(self, field.name)}'
                    for field in dataclasses.fields(self)
                    if getattr(self, field.name) != field.default)
        return f'{type(self).__name__}({s})'

    setattr(cls, '__str__', __str__)
    return cls


# A bunch of commonly used type definitions.

PhabricatorDiffNumberWithD = NewType(
    "PhabricatorDiffNumberWithD", str
)  # aka "D1234567"

GitHubNumber = NewType("GitHubNumber", int)  # aka 1234 (as in #1234)

# GraphQL ID that identifies Repository from GitHubb schema;
# aka MDExOlB1bGxSZXF1ZXN0MjU2NDM3MjQw
GitHubRepositoryId = NewType("GitHubRepositoryId", str)

# aka 12 (as in gh/ezyang/12/base)
GhNumber = NewType("GhNumber", str)

# Actually, sometimes we smuggle revs in here.  We shouldn't.
# We want to guarantee that they're full canonical revs so that
# you can do equality on them without fear.
# commit 3f72e04eeabcc7e77f127d3e7baf2f5ccdb148ee
GitCommitHash = NewType("GitCommitHash", str)

# tree 3f72e04eeabcc7e77f127d3e7baf2f5ccdb148ee
GitTreeHash = NewType("GitTreeHash", str)
