#!/usr/bin/env python3

import logging
import os
import re
from typing import NamedTuple, Optional
import yaml

import requests

import ghstack.logs

CONFIG_FILENAME = ".arcrc"
GITHUB_URL = "github.com"
GITHUB_API_URL = "https://api.github.com/"

Config = NamedTuple(
    "Config",
    [
        # OAuth token to authenticate to GitHub with
        ("github_oauth", Optional[str]),
        # GitHub username; used to namespace branches we create
        ("github_username", str),
        # GitHub url. Defaults to github.com which is true for all non-enterprise github repos
        ("github_url", str),
        # Name of the upstream remote
        ("remote_name", str),
    ],
)


def read_config(
    *,
    request_circle_token: bool = False,
    request_github_token: bool = True,
) -> Config:  # noqa: C901
    # Hard-coding the following values
    github_url = GITHUB_URL
    remote_name = "origin"

    # Get the Github OAuth token
    config_path = os.path.join(os.path.expanduser("~"), CONFIG_FILENAME)
    github_oauth = None
    with open(config_path, "r") as f:
        data = yaml.safe_load(f)
        github_oauth = data.get("hosts").get(GITHUB_API_URL).get("token")
        if not github_oauth:
            raise RuntimeError(
                "No Github token found in ~/.arcrc file. Please follow the instructions "
                "in https://rubrik.atlassian.net/wiki/spaces/EN/pages/2892170989/"
                "ARC+config+set+up+for+GitHub+pull+requests."
            )

    assert github_oauth is not None

    logging.debug(f"config_path = {config_path}")

    if github_oauth is not None:
        ghstack.logs.formatter.redact(github_oauth, "<GITHUB_OAUTH>")

    # Get the Github username
    github_username = None
    if github_username is None and github_oauth is not None:
        request_url: str
        if github_url == "github.com":
            request_url = f"https://api.{github_url}/user"
        else:
            request_url = f"https://{github_url}/api/v3/user"
        res = requests.get(
            request_url,
            headers={
                "Accept": "application/vnd.github+json",
                "Authorization": f"Bearer {github_oauth}",
                "X-GitHub-Api-Version": "2022-11-28",
            },
        )
        res.raise_for_status()
        github_username = res.json()["login"]
    if github_username is None:
        github_username = input("GitHub username: ")
        if not re.match(
            r"^[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$", github_username, re.I
        ):
            raise RuntimeError(
                "{} is not a valid GitHub username".format(github_username)
            )

    conf = Config(
        github_oauth=github_oauth,
        github_username=github_username,
        github_url=github_url,
        remote_name=remote_name,
    )
    logging.debug(f"conf = {conf}")
    return conf
