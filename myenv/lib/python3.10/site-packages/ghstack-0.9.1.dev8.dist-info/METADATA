Metadata-Version: 2.1
Name: ghstack
Version: 0.9.1.dev8
Summary: Stack diff support for GitHub
Home-page: https://github.com/ezyang/ghstack
License: MIT
Author: Edward Z. Yang
Author-email: ezyang@mit.edu
Requires-Python: >=3.8.1,<4.0.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: aiohttp (>=3,<4)
Requires-Dist: click (>=8,<9)
Requires-Dist: importlib-metadata (>=1.4) ; python_version < "3.8"
Requires-Dist: requests (>=2,<3)
Requires-Dist: typing-extensions (>=3,<5)
Project-URL: Repository, https://github.com/ezyang/ghstack
Description-Content-Type: text/markdown

# ghstack

This is a clone of https://github.com/ezyang/ghstack. Please reach out to
the [Stark team](https://rubrik.atlassian.net/wiki/spaces/EN/pages/1228801422/Team+-+Stark)
for any questions.

**Conveniently submit stacks of diffs to GitHub as separate pull requests.**

ghstack is tested with 
[several different Python versions](https://github.com/ezyang/ghstack/blob/master/.github/workflows/test.yml#L13). 
It requires at least Python 3.8.1.

## How to setup and develop

### Prerequisites
- Clone this repo
- Make sure you have followed the steps in [this wiki](https://rubrik.atlassian.net/wiki/spaces/EN/pages/2892170989/ARC+config+set+up+for+GitHub+pull+requests) to set up your `~/.arcrc` file
- Get access to https://github.com/scaledata/stark-sdmain-testing-clone for testing (post in the #stark channel)
- Set up a Python virtual environment with [Poetry](https://python-poetry.org/docs/#installation) installed

```bash
python3 -m venv ghstack_env
source ghstack_env/bin/activate

# Install pipx for Ubuntu 22.04 and earlier
python3 -m pip install --user pipx
python3 -m pipx ensurepath

# Install poetry
pipx install poetry==1.8.2
```

Ideally we would like to move away from Poetry in the future as a
dependency manager, and use `bazel` instead to match what we do in
`sdmain`. 

### Development workflow
1. Make changes locally
2. Bump the version in `pyproject.toml`
3. Build with `poetry build`
4. Copy the resulting `.whl` file into the test clone repo
```bash
cp dist/ghstack-0.9.1+stark.v0.2-py3-none-any.whl ../stark-sdmain-testing-clone/
```
5. Activate the buildenv environment in the test repo: `source ./polaris/.buildenv/bin/activate`
6. Install the dev ghstack version
```bash
pip install ghstack-0.9.1+stark.v0.2-py3-none-any.whl --force-reinstall --index-url https://pypi.org/simple

# This causes some dependency issues that need to be manually resolved.
# I can't figure out how to make this work with the default Artifactory index URL, so this is a bit hacky.
pip install charset-normalizer==2.1.1 --index-url https://pypi.org/simple
pip install urllib3==1.26.1 --index-url https://pypi.org/simple

# You can confirm the correct version with the following:
ghstack --version
```
7. If you have arc wrapper changes in `sdmain`, build those changes with bazel and copy the `.par` file into the test clone repo
```bash
sudo cp ./bazel-bin/lab/arc_wrapper/arc.par ../stark-sdmain-testing-clone/polaris/.buildenv/bin/arc.par
```
8. Create a stacked PR (i.e. a branch with multiple commits)
9. Run `./polaris/.buildenv/bin/arc.par diff --stacked`
10. Phew, you're done! Now to repeat this process every time you make a change :)

### Testing

The tests that ghstack came with probably do not really work
anymore due to the changes we're making.

If you'd like to run them:
```
poetry run python test_ghstack.py
```
That runs most of the tests; you can run all tests (including lints) like this:
```
poetry run python run_tests.py
```

## Deploy

`poetry build`
--> This will create a `dist` folder with distribution files (e.g. `tar.gz` and `whl` files)

We can use poetry to publish the new version.

```
poetry config repositories.rubrik-pypi-local https://repository-master.stark.rubrik.com/artifactory/api/pypi/rubrik-pypi-local
# Check the repository was configured correctly:
poetry config --list

poetry publish --build --repository rubrik-pypi-local --username ARTIFACTORY_USERNAME
```
This will push the version to [Artifactory](https://repository-master.stark.rubrik.com/ui/repos/tree/General/rubrik-pypi-local%2Fghstack).

The ghstack version that you published then needs
to be updated in [sd_dev](https://github.com/scaledata/sdmain/blob/master/deployment/ansible/roles/sd_dev/files/python3_dev_requirements.txt#L94) and [buildenv](https://github.com/scaledata/sdmain/blob/master/polaris/buildenv/buildscripts/python_requirements.txt#L92).

## General ghstack usage documentation

Please check the [original ghstack repo](https://github.com/ezyang/ghstack) for specific usage documentation.

