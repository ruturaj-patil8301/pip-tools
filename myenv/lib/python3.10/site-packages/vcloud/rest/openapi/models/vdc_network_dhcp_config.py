# coding: utf-8

"""
    VMware Cloud Director OpenAPI

    VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 

    OpenAPI spec version: 36.0
    Contact: https://code.vmware.com/support
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VdcNetworkDhcpConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'lease_time': 'int',
        'dhcp_pools': 'list[VdcNetworkDhcpPool]',
        'mode': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'lease_time': 'leaseTime',
        'dhcp_pools': 'dhcpPools',
        'mode': 'mode',
        'ip_address': 'ipAddress'
    }

    def __init__(self, enabled=True, lease_time=86400, dhcp_pools=None, mode=None, ip_address=None):
        """
        VdcNetworkDhcpConfig - a model defined in Swagger
        """

        self._enabled = None
        self._lease_time = None
        self._dhcp_pools = None
        self._mode = None
        self._ip_address = None

        if enabled is not None:
          self.enabled = enabled
        if lease_time is not None:
          self.lease_time = lease_time
        if dhcp_pools is not None:
          self.dhcp_pools = dhcp_pools
        if mode is not None:
          self.mode = mode
        if ip_address is not None:
          self.ip_address = ip_address

    @property
    def enabled(self):
        """
        Gets the enabled of this VdcNetworkDhcpConfig.
        Whether the DHCP service is currently enabled on network.

        :return: The enabled of this VdcNetworkDhcpConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this VdcNetworkDhcpConfig.
        Whether the DHCP service is currently enabled on network.

        :param enabled: The enabled of this VdcNetworkDhcpConfig.
        :type: bool
        """

        self._enabled = enabled

    @property
    def lease_time(self):
        """
        Gets the lease_time of this VdcNetworkDhcpConfig.
        The amount of time in milliseconds of how long a DHCP IP will be leased out for. The minimum is 60ms while the maximum is 4294967295ms, which is roughly 49 days. 

        :return: The lease_time of this VdcNetworkDhcpConfig.
        :rtype: int
        """
        return self._lease_time

    @lease_time.setter
    def lease_time(self, lease_time):
        """
        Sets the lease_time of this VdcNetworkDhcpConfig.
        The amount of time in milliseconds of how long a DHCP IP will be leased out for. The minimum is 60ms while the maximum is 4294967295ms, which is roughly 49 days. 

        :param lease_time: The lease_time of this VdcNetworkDhcpConfig.
        :type: int
        """

        self._lease_time = lease_time

    @property
    def dhcp_pools(self):
        """
        Gets the dhcp_pools of this VdcNetworkDhcpConfig.
        Range of DHCP IP addresses

        :return: The dhcp_pools of this VdcNetworkDhcpConfig.
        :rtype: list[VdcNetworkDhcpPool]
        """
        return self._dhcp_pools

    @dhcp_pools.setter
    def dhcp_pools(self, dhcp_pools):
        """
        Sets the dhcp_pools of this VdcNetworkDhcpConfig.
        Range of DHCP IP addresses

        :param dhcp_pools: The dhcp_pools of this VdcNetworkDhcpConfig.
        :type: list[VdcNetworkDhcpPool]
        """

        self._dhcp_pools = dhcp_pools

    @property
    def mode(self):
        """
        Gets the mode of this VdcNetworkDhcpConfig.
        This value describes how the DHCP service is configured for this network. Once a DHCP service has been created, the mode attribute cannot be changed. The mode field will default to 'EDGE' if it is not provided. This field only applies to networks backed by an NSX-T network provider. <ul> <li>The supported values are EDGE and NETWORK.</li> <li>If EDGE is specified, the DHCP service of the edge is used to obtain DHCP IPs.</li> <li>If NETWORK is specified, a DHCP server is created for use by this network.</li> </ul> In order to use DHCP for IPV6, NETWORK mode must be used. Routed networks which are using NETWORK DHCP services can be disconnected from the edge gateway and still retain their DHCP configuration, however network using EDGE DHCP cannot be disconnected from the gateway until DHCP has been disabled. 

        :return: The mode of this VdcNetworkDhcpConfig.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this VdcNetworkDhcpConfig.
        This value describes how the DHCP service is configured for this network. Once a DHCP service has been created, the mode attribute cannot be changed. The mode field will default to 'EDGE' if it is not provided. This field only applies to networks backed by an NSX-T network provider. <ul> <li>The supported values are EDGE and NETWORK.</li> <li>If EDGE is specified, the DHCP service of the edge is used to obtain DHCP IPs.</li> <li>If NETWORK is specified, a DHCP server is created for use by this network.</li> </ul> In order to use DHCP for IPV6, NETWORK mode must be used. Routed networks which are using NETWORK DHCP services can be disconnected from the edge gateway and still retain their DHCP configuration, however network using EDGE DHCP cannot be disconnected from the gateway until DHCP has been disabled. 

        :param mode: The mode of this VdcNetworkDhcpConfig.
        :type: str
        """

        self._mode = mode

    @property
    def ip_address(self):
        """
        Gets the ip_address of this VdcNetworkDhcpConfig.
        The IP address of the DHCP service. This is required upon create if using NETWORK mode. This field only applies to networks backed by an NSX-T network provider. 

        :return: The ip_address of this VdcNetworkDhcpConfig.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this VdcNetworkDhcpConfig.
        The IP address of the DHCP service. This is required upon create if using NETWORK mode. This field only applies to networks backed by an NSX-T network provider. 

        :param ip_address: The ip_address of this VdcNetworkDhcpConfig.
        :type: str
        """

        self._ip_address = ip_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VdcNetworkDhcpConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
