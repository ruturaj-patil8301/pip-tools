# coding: utf-8

"""
    VMware Cloud Director OpenAPI

    VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 

    OpenAPI spec version: 36.0
    Contact: https://code.vmware.com/support
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Right(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'description': 'str',
        'bundle_key': 'str',
        'category': 'str',
        'service_namespace': 'str',
        'right_type': 'str',
        'implied_rights': 'list[EntityReference]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'description': 'description',
        'bundle_key': 'bundleKey',
        'category': 'category',
        'service_namespace': 'serviceNamespace',
        'right_type': 'rightType',
        'implied_rights': 'impliedRights'
    }

    def __init__(self, name=None, id=None, description=None, bundle_key=None, category=None, service_namespace=None, right_type=None, implied_rights=None):
        """
        Right - a model defined in Swagger
        """

        self._name = None
        self._id = None
        self._description = None
        self._bundle_key = None
        self._category = None
        self._service_namespace = None
        self._right_type = None
        self._implied_rights = None

        self.name = name
        if id is not None:
          self.id = id
        if description is not None:
          self.description = description
        if bundle_key is not None:
          self.bundle_key = bundle_key
        if category is not None:
          self.category = category
        if service_namespace is not None:
          self.service_namespace = service_namespace
        if right_type is not None:
          self.right_type = right_type
        if implied_rights is not None:
          self.implied_rights = implied_rights

    @property
    def name(self):
        """
        Gets the name of this Right.

        :return: The name of this Right.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Right.

        :param name: The name of this Right.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this Right.

        :return: The id of this Right.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Right.

        :param id: The id of this Right.
        :type: str
        """
        if id is not None and len(id) > 128:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `128`")

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this Right.

        :return: The description of this Right.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Right.

        :param description: The description of this Right.
        :type: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def bundle_key(self):
        """
        Gets the bundle_key of this Right.

        :return: The bundle_key of this Right.
        :rtype: str
        """
        return self._bundle_key

    @bundle_key.setter
    def bundle_key(self, bundle_key):
        """
        Sets the bundle_key of this Right.

        :param bundle_key: The bundle_key of this Right.
        :type: str
        """
        if bundle_key is not None and len(bundle_key) > 128:
            raise ValueError("Invalid value for `bundle_key`, length must be less than or equal to `128`")
        if bundle_key is not None and len(bundle_key) < 1:
            raise ValueError("Invalid value for `bundle_key`, length must be greater than or equal to `1`")

        self._bundle_key = bundle_key

    @property
    def category(self):
        """
        Gets the category of this Right.

        :return: The category of this Right.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Right.

        :param category: The category of this Right.
        :type: str
        """
        if category is not None and len(category) > 128:
            raise ValueError("Invalid value for `category`, length must be less than or equal to `128`")
        if category is not None and len(category) < 1:
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")

        self._category = category

    @property
    def service_namespace(self):
        """
        Gets the service_namespace of this Right.

        :return: The service_namespace of this Right.
        :rtype: str
        """
        return self._service_namespace

    @service_namespace.setter
    def service_namespace(self, service_namespace):
        """
        Sets the service_namespace of this Right.

        :param service_namespace: The service_namespace of this Right.
        :type: str
        """
        if service_namespace is not None and len(service_namespace) > 128:
            raise ValueError("Invalid value for `service_namespace`, length must be less than or equal to `128`")
        if service_namespace is not None and len(service_namespace) < 1:
            raise ValueError("Invalid value for `service_namespace`, length must be greater than or equal to `1`")

        self._service_namespace = service_namespace

    @property
    def right_type(self):
        """
        Gets the right_type of this Right.

        :return: The right_type of this Right.
        :rtype: str
        """
        return self._right_type

    @right_type.setter
    def right_type(self, right_type):
        """
        Sets the right_type of this Right.

        :param right_type: The right_type of this Right.
        :type: str
        """
        allowed_values = ["VIEW", "MODIFY"]
        if right_type not in allowed_values:
            raise ValueError(
                "Invalid value for `right_type` ({0}), must be one of {1}"
                .format(right_type, allowed_values)
            )

        self._right_type = right_type

    @property
    def implied_rights(self):
        """
        Gets the implied_rights of this Right.
        The set of implied rights.

        :return: The implied_rights of this Right.
        :rtype: list[EntityReference]
        """
        return self._implied_rights

    @implied_rights.setter
    def implied_rights(self, implied_rights):
        """
        Sets the implied_rights of this Right.
        The set of implied rights.

        :param implied_rights: The implied_rights of this Right.
        :type: list[EntityReference]
        """

        self._implied_rights = implied_rights

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Right):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
