# coding: utf-8

"""
    VMware Cloud Director OpenAPI

    VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 

    OpenAPI spec version: 36.0
    Contact: https://code.vmware.com/support
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UsedIpAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'str',
        'entity_name': 'str',
        'v_app_name': 'str',
        'ip_address': 'str',
        'deployed': 'bool',
        'allocation_type': 'UsedIpAddressAllocationType',
        'network_ref': 'EntityReference',
        'org_ref': 'EntityReference'
    }

    attribute_map = {
        'entity_id': 'entityId',
        'entity_name': 'entityName',
        'v_app_name': 'vAppName',
        'ip_address': 'ipAddress',
        'deployed': 'deployed',
        'allocation_type': 'allocationType',
        'network_ref': 'networkRef',
        'org_ref': 'orgRef'
    }

    def __init__(self, entity_id=None, entity_name=None, v_app_name=None, ip_address=None, deployed=None, allocation_type=None, network_ref=None, org_ref=None):
        """
        UsedIpAddress - a model defined in Swagger
        """

        self._entity_id = None
        self._entity_name = None
        self._v_app_name = None
        self._ip_address = None
        self._deployed = None
        self._allocation_type = None
        self._network_ref = None
        self._org_ref = None

        if entity_id is not None:
          self.entity_id = entity_id
        if entity_name is not None:
          self.entity_name = entity_name
        if v_app_name is not None:
          self.v_app_name = v_app_name
        if ip_address is not None:
          self.ip_address = ip_address
        if deployed is not None:
          self.deployed = deployed
        if allocation_type is not None:
          self.allocation_type = allocation_type
        if network_ref is not None:
          self.network_ref = network_ref
        if org_ref is not None:
          self.org_ref = org_ref

    @property
    def entity_id(self):
        """
        Gets the entity_id of this UsedIpAddress.
        Id of the entity using the IP address, such as a VM.

        :return: The entity_id of this UsedIpAddress.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this UsedIpAddress.
        Id of the entity using the IP address, such as a VM.

        :param entity_id: The entity_id of this UsedIpAddress.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """
        Gets the entity_name of this UsedIpAddress.
        Name of the entity using the IP address.

        :return: The entity_name of this UsedIpAddress.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """
        Sets the entity_name of this UsedIpAddress.
        Name of the entity using the IP address.

        :param entity_name: The entity_name of this UsedIpAddress.
        :type: str
        """

        self._entity_name = entity_name

    @property
    def v_app_name(self):
        """
        Gets the v_app_name of this UsedIpAddress.
        Name of the vApp whose VM is using this IP address.

        :return: The v_app_name of this UsedIpAddress.
        :rtype: str
        """
        return self._v_app_name

    @v_app_name.setter
    def v_app_name(self, v_app_name):
        """
        Sets the v_app_name of this UsedIpAddress.
        Name of the vApp whose VM is using this IP address.

        :param v_app_name: The v_app_name of this UsedIpAddress.
        :type: str
        """

        self._v_app_name = v_app_name

    @property
    def ip_address(self):
        """
        Gets the ip_address of this UsedIpAddress.
        The IP address in use.

        :return: The ip_address of this UsedIpAddress.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this UsedIpAddress.
        The IP address in use.

        :param ip_address: The ip_address of this UsedIpAddress.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def deployed(self):
        """
        Gets the deployed of this UsedIpAddress.
        Whether the entity using this IP address is currently deployed.

        :return: The deployed of this UsedIpAddress.
        :rtype: bool
        """
        return self._deployed

    @deployed.setter
    def deployed(self, deployed):
        """
        Sets the deployed of this UsedIpAddress.
        Whether the entity using this IP address is currently deployed.

        :param deployed: The deployed of this UsedIpAddress.
        :type: bool
        """

        self._deployed = deployed

    @property
    def allocation_type(self):
        """
        Gets the allocation_type of this UsedIpAddress.
        The possible allocation types for network address like VSM allocated, VM allocated or NAT routed.

        :return: The allocation_type of this UsedIpAddress.
        :rtype: UsedIpAddressAllocationType
        """
        return self._allocation_type

    @allocation_type.setter
    def allocation_type(self, allocation_type):
        """
        Sets the allocation_type of this UsedIpAddress.
        The possible allocation types for network address like VSM allocated, VM allocated or NAT routed.

        :param allocation_type: The allocation_type of this UsedIpAddress.
        :type: UsedIpAddressAllocationType
        """

        self._allocation_type = allocation_type

    @property
    def network_ref(self):
        """
        Gets the network_ref of this UsedIpAddress.
        The vApp network or Org vDC network to which this entity is connected. 

        :return: The network_ref of this UsedIpAddress.
        :rtype: EntityReference
        """
        return self._network_ref

    @network_ref.setter
    def network_ref(self, network_ref):
        """
        Sets the network_ref of this UsedIpAddress.
        The vApp network or Org vDC network to which this entity is connected. 

        :param network_ref: The network_ref of this UsedIpAddress.
        :type: EntityReference
        """

        self._network_ref = network_ref

    @property
    def org_ref(self):
        """
        Gets the org_ref of this UsedIpAddress.
        The organization that this entity belongs to. 

        :return: The org_ref of this UsedIpAddress.
        :rtype: EntityReference
        """
        return self._org_ref

    @org_ref.setter
    def org_ref(self, org_ref):
        """
        Sets the org_ref of this UsedIpAddress.
        The organization that this entity belongs to. 

        :param org_ref: The org_ref of this UsedIpAddress.
        :type: EntityReference
        """

        self._org_ref = org_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UsedIpAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
