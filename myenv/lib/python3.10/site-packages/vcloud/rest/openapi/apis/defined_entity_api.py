# coding: utf-8

"""
    VMware Cloud Director OpenAPI

    VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 

    OpenAPI spec version: 36.0
    Contact: https://code.vmware.com/support
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefinedEntityApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_defined_entity(self, entity, id, **kwargs):
        """
        Creates a defined entity based on the entity type (URN).
        Creates a defined entity based on the entity type (URN).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_defined_entity(entity, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DefinedEntity entity: (required)
        :param str id: (required)
        :param str invoke_hooks: Only users with Admin FullControl access to the Entity Type can pass this parameter. The default value is 'true'. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_defined_entity_with_http_info(entity, id, **kwargs)
        else:
            (data) = self.create_defined_entity_with_http_info(entity, id, **kwargs)
            return data

    def create_defined_entity_with_http_info(self, entity, id, **kwargs):
        """
        Creates a defined entity based on the entity type (URN).
        Creates a defined entity based on the entity type (URN).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_defined_entity_with_http_info(entity, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DefinedEntity entity: (required)
        :param str id: (required)
        :param str invoke_hooks: Only users with Admin FullControl access to the Entity Type can pass this parameter. The default value is 'true'. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'id', 'invoke_hooks']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_defined_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if ('entity' not in params) or (params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `create_defined_entity`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_defined_entity`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'invoke_hooks' in params:
            query_params.append(('invokeHooks', params['invoke_hooks']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'entity' in params:
            body_params = params['entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entityTypes/{id}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_metadata_entry(self, entry, id, **kwargs):
        """
        Creates a new entry.
        Creates a new entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_metadata_entry(entry, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetadataEntry entry: (required)
        :param str id: the URN of the entity the entry is attached to. (required)
        :return: MetadataEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_metadata_entry_with_http_info(entry, id, **kwargs)
        else:
            (data) = self.create_metadata_entry_with_http_info(entry, id, **kwargs)
            return data

    def create_metadata_entry_with_http_info(self, entry, id, **kwargs):
        """
        Creates a new entry.
        Creates a new entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_metadata_entry_with_http_info(entry, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetadataEntry entry: (required)
        :param str id: the URN of the entity the entry is attached to. (required)
        :return: MetadataEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metadata_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry' is set
        if ('entry' not in params) or (params['entry'] is None):
            raise ValueError("Missing the required parameter `entry` when calling `create_metadata_entry`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_metadata_entry`")

        if 'id' in params and not re.search('^urn:vcloud:.+$', params['id']):
            raise ValueError("Invalid value for parameter `id` when calling `create_metadata_entry`, must conform to the pattern `/^urn:vcloud:.+$/`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'entry' in params:
            body_params = params['entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}/metadata', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEntry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_defined_entity(self, id, **kwargs):
        """
        Deletes the defined entity with the unique identifier (URN)
        Deletes the defined entity with the unique identifier (URN)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_defined_entity(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :param str invoke_hooks: Only users with Admin FullControl access to the Entity Type can pass this parameter. The default value is 'true'. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_defined_entity_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_defined_entity_with_http_info(id, **kwargs)
            return data

    def delete_defined_entity_with_http_info(self, id, **kwargs):
        """
        Deletes the defined entity with the unique identifier (URN)
        Deletes the defined entity with the unique identifier (URN)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_defined_entity_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :param str invoke_hooks: Only users with Admin FullControl access to the Entity Type can pass this parameter. The default value is 'true'. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'invoke_hooks']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_defined_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_defined_entity`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'invoke_hooks' in params:
            query_params.append(('invokeHooks', params['invoke_hooks']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_metadata_entry(self, id, metadata_id, **kwargs):
        """
        Delete a single metadata entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_metadata_entry(id, metadata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str metadata_id: a metadata vcloud id urn (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_metadata_entry_with_http_info(id, metadata_id, **kwargs)
        else:
            (data) = self.delete_metadata_entry_with_http_info(id, metadata_id, **kwargs)
            return data

    def delete_metadata_entry_with_http_info(self, id, metadata_id, **kwargs):
        """
        Delete a single metadata entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_metadata_entry_with_http_info(id, metadata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str metadata_id: a metadata vcloud id urn (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'metadata_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadata_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_metadata_entry`")
        # verify the required parameter 'metadata_id' is set
        if ('metadata_id' not in params) or (params['metadata_id'] is None):
            raise ValueError("Missing the required parameter `metadata_id` when calling `delete_metadata_entry`")

        if 'id' in params and not re.search('^urn:vcloud:.+$', params['id']):
            raise ValueError("Invalid value for parameter `id` when calling `delete_metadata_entry`, must conform to the pattern `/^urn:vcloud:.+$/`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'metadata_id' in params:
            path_params['metadataId'] = params['metadata_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}/metadata/{metadataId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_defined_entities_by_entity_type(self, vendor, nss, version, page, page_size, **kwargs):
        """
        Gets the collection of defined entities for the vCD-defined type with the specified vendor, nss and version.
        Gets the collection of defined entities for the vCD-defined type with the specified vendor, nss and version. The version can act as a wildcard. If only '1' is specified as the version, all entity types with a major version of '1' will be matched (e.g. 1.0.0, 1.1.2). If '1.0' is specified, all entity types with a major version of '1' and a minor version of '0' will be included (e.g. 1.0.0, 1.0.1). If the full semver is specified, then no search will be performed. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_defined_entities_by_entity_type(vendor, nss, version, page, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str vendor: (required)
        :param str nss: (required)
        :param str version: (required)
        :param int page: Page to fetch, zero offset. (required)
        :param int page_size: Results per page to fetch. (required)
        :param str filter: Filter for a query.  FIQL format.
        :param str sort_asc: Field to use for ascending sort
        :param str sort_desc: Field to use for descending sort
        :return: DefinedEntities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_defined_entities_by_entity_type_with_http_info(vendor, nss, version, page, page_size, **kwargs)
        else:
            (data) = self.get_defined_entities_by_entity_type_with_http_info(vendor, nss, version, page, page_size, **kwargs)
            return data

    def get_defined_entities_by_entity_type_with_http_info(self, vendor, nss, version, page, page_size, **kwargs):
        """
        Gets the collection of defined entities for the vCD-defined type with the specified vendor, nss and version.
        Gets the collection of defined entities for the vCD-defined type with the specified vendor, nss and version. The version can act as a wildcard. If only '1' is specified as the version, all entity types with a major version of '1' will be matched (e.g. 1.0.0, 1.1.2). If '1.0' is specified, all entity types with a major version of '1' and a minor version of '0' will be included (e.g. 1.0.0, 1.0.1). If the full semver is specified, then no search will be performed. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_defined_entities_by_entity_type_with_http_info(vendor, nss, version, page, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str vendor: (required)
        :param str nss: (required)
        :param str version: (required)
        :param int page: Page to fetch, zero offset. (required)
        :param int page_size: Results per page to fetch. (required)
        :param str filter: Filter for a query.  FIQL format.
        :param str sort_asc: Field to use for ascending sort
        :param str sort_desc: Field to use for descending sort
        :return: DefinedEntities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor', 'nss', 'version', 'page', 'page_size', 'filter', 'sort_asc', 'sort_desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_defined_entities_by_entity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor' is set
        if ('vendor' not in params) or (params['vendor'] is None):
            raise ValueError("Missing the required parameter `vendor` when calling `get_defined_entities_by_entity_type`")
        # verify the required parameter 'nss' is set
        if ('nss' not in params) or (params['nss'] is None):
            raise ValueError("Missing the required parameter `nss` when calling `get_defined_entities_by_entity_type`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_defined_entities_by_entity_type`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_defined_entities_by_entity_type`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_defined_entities_by_entity_type`")

        if 'vendor' in params and len(params['vendor']) < 1:
            raise ValueError("Invalid value for parameter `vendor` when calling `get_defined_entities_by_entity_type`, length must be greater than or equal to `1`")
        if 'nss' in params and len(params['nss']) < 1:
            raise ValueError("Invalid value for parameter `nss` when calling `get_defined_entities_by_entity_type`, length must be greater than or equal to `1`")
        if 'version' in params and len(params['version']) < 1:
            raise ValueError("Invalid value for parameter `version` when calling `get_defined_entities_by_entity_type`, length must be greater than or equal to `1`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `get_defined_entities_by_entity_type`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 128:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_defined_entities_by_entity_type`, must be a value less than or equal to `128`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_defined_entities_by_entity_type`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'vendor' in params:
            path_params['vendor'] = params['vendor']
        if 'nss' in params:
            path_params['nss'] = params['nss']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))
        if 'sort_asc' in params:
            query_params.append(('sortAsc', params['sort_asc']))
        if 'sort_desc' in params:
            query_params.append(('sortDesc', params['sort_desc']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/types/{vendor}/{nss}/{version}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DefinedEntities',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_defined_entities_by_interface(self, vendor, nss, version, page, page_size, **kwargs):
        """
        Gets the collection of defined entities for the vCD-defined interface with the specified vendor, nss and version
        Gets the collection of defined entities for the vCD-defined interface with the specified vendor, nss and version. The version can act as a wildcard. If only '1' is specified as the version, all entity types with a major version of '1' will be matched (e.g. 1.0.0, 1.1.2). If '1.0' is specified, all entity types with a major version of '1' and a minor version of '0' will be included (e.g. 1.0.0, 1.0.1). If the full semver is specified, then no search will be performed. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_defined_entities_by_interface(vendor, nss, version, page, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str vendor: (required)
        :param str nss: (required)
        :param str version: (required)
        :param int page: Page to fetch, zero offset. (required)
        :param int page_size: Results per page to fetch. (required)
        :param str filter: Filter for a query.  FIQL format.
        :param str sort_asc: Field to use for ascending sort
        :param str sort_desc: Field to use for descending sort
        :return: DefinedEntities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_defined_entities_by_interface_with_http_info(vendor, nss, version, page, page_size, **kwargs)
        else:
            (data) = self.get_defined_entities_by_interface_with_http_info(vendor, nss, version, page, page_size, **kwargs)
            return data

    def get_defined_entities_by_interface_with_http_info(self, vendor, nss, version, page, page_size, **kwargs):
        """
        Gets the collection of defined entities for the vCD-defined interface with the specified vendor, nss and version
        Gets the collection of defined entities for the vCD-defined interface with the specified vendor, nss and version. The version can act as a wildcard. If only '1' is specified as the version, all entity types with a major version of '1' will be matched (e.g. 1.0.0, 1.1.2). If '1.0' is specified, all entity types with a major version of '1' and a minor version of '0' will be included (e.g. 1.0.0, 1.0.1). If the full semver is specified, then no search will be performed. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_defined_entities_by_interface_with_http_info(vendor, nss, version, page, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str vendor: (required)
        :param str nss: (required)
        :param str version: (required)
        :param int page: Page to fetch, zero offset. (required)
        :param int page_size: Results per page to fetch. (required)
        :param str filter: Filter for a query.  FIQL format.
        :param str sort_asc: Field to use for ascending sort
        :param str sort_desc: Field to use for descending sort
        :return: DefinedEntities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor', 'nss', 'version', 'page', 'page_size', 'filter', 'sort_asc', 'sort_desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_defined_entities_by_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor' is set
        if ('vendor' not in params) or (params['vendor'] is None):
            raise ValueError("Missing the required parameter `vendor` when calling `get_defined_entities_by_interface`")
        # verify the required parameter 'nss' is set
        if ('nss' not in params) or (params['nss'] is None):
            raise ValueError("Missing the required parameter `nss` when calling `get_defined_entities_by_interface`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_defined_entities_by_interface`")
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_defined_entities_by_interface`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_defined_entities_by_interface`")

        if 'vendor' in params and len(params['vendor']) < 1:
            raise ValueError("Invalid value for parameter `vendor` when calling `get_defined_entities_by_interface`, length must be greater than or equal to `1`")
        if 'nss' in params and len(params['nss']) < 1:
            raise ValueError("Invalid value for parameter `nss` when calling `get_defined_entities_by_interface`, length must be greater than or equal to `1`")
        if 'version' in params and len(params['version']) < 1:
            raise ValueError("Invalid value for parameter `version` when calling `get_defined_entities_by_interface`, length must be greater than or equal to `1`")
        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `get_defined_entities_by_interface`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 128:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_defined_entities_by_interface`, must be a value less than or equal to `128`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_defined_entities_by_interface`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'vendor' in params:
            path_params['vendor'] = params['vendor']
        if 'nss' in params:
            path_params['nss'] = params['nss']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))
        if 'sort_asc' in params:
            query_params.append(('sortAsc', params['sort_asc']))
        if 'sort_desc' in params:
            query_params.append(('sortDesc', params['sort_desc']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/interfaces/{vendor}/{nss}/{version}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DefinedEntities',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_defined_entity(self, id, **kwargs):
        """
        Gets the defined entity with the unique identifier (URN)
        Gets the defined entity with the unique identifier (URN)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_defined_entity(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :return: DefinedEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_defined_entity_with_http_info(id, **kwargs)
        else:
            (data) = self.get_defined_entity_with_http_info(id, **kwargs)
            return data

    def get_defined_entity_with_http_info(self, id, **kwargs):
        """
        Gets the defined entity with the unique identifier (URN)
        Gets the defined entity with the unique identifier (URN)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_defined_entity_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :return: DefinedEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_defined_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_defined_entity`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DefinedEntity',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_metadata(self, page, page_size, id, **kwargs):
        """
        Retrieves all the metadata for the entity.
        Retrieves all the metadata for the VM. User can view the tags if user can view the VM. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata(page, page_size, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page to fetch, zero offset. (required)
        :param int page_size: Results per page to fetch. (required)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str filter: Filter for a query.  FIQL format.
        :param str sort_asc: Field to use for ascending sort
        :param str sort_desc: Field to use for descending sort
        :return: MetadataEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_metadata_with_http_info(page, page_size, id, **kwargs)
        else:
            (data) = self.get_metadata_with_http_info(page, page_size, id, **kwargs)
            return data

    def get_metadata_with_http_info(self, page, page_size, id, **kwargs):
        """
        Retrieves all the metadata for the entity.
        Retrieves all the metadata for the VM. User can view the tags if user can view the VM. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_with_http_info(page, page_size, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page to fetch, zero offset. (required)
        :param int page_size: Results per page to fetch. (required)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str filter: Filter for a query.  FIQL format.
        :param str sort_asc: Field to use for ascending sort
        :param str sort_desc: Field to use for descending sort
        :return: MetadataEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'id', 'filter', 'sort_asc', 'sort_desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `get_metadata`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_metadata`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_metadata`")

        if 'page' in params and params['page'] < 1:
            raise ValueError("Invalid value for parameter `page` when calling `get_metadata`, must be a value greater than or equal to `1`")
        if 'page_size' in params and params['page_size'] > 128:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_metadata`, must be a value less than or equal to `128`")
        if 'page_size' in params and params['page_size'] < 0:
            raise ValueError("Invalid value for parameter `page_size` when calling `get_metadata`, must be a value greater than or equal to `0`")
        if 'id' in params and not re.search('^urn:vcloud:.+$', params['id']):
            raise ValueError("Invalid value for parameter `id` when calling `get_metadata`, must conform to the pattern `/^urn:vcloud:.+$/`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))
        if 'sort_asc' in params:
            query_params.append(('sortAsc', params['sort_asc']))
        if 'sort_desc' in params:
            query_params.append(('sortDesc', params['sort_desc']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}/metadata', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEntries',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_metadata_entry(self, id, metadata_id, **kwargs):
        """
        Get a single metadata entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_entry(id, metadata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str metadata_id: a metadata vcloud id urn (required)
        :return: MetadataEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_metadata_entry_with_http_info(id, metadata_id, **kwargs)
        else:
            (data) = self.get_metadata_entry_with_http_info(id, metadata_id, **kwargs)
            return data

    def get_metadata_entry_with_http_info(self, id, metadata_id, **kwargs):
        """
        Get a single metadata entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_metadata_entry_with_http_info(id, metadata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str metadata_id: a metadata vcloud id urn (required)
        :return: MetadataEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'metadata_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_metadata_entry`")
        # verify the required parameter 'metadata_id' is set
        if ('metadata_id' not in params) or (params['metadata_id'] is None):
            raise ValueError("Missing the required parameter `metadata_id` when calling `get_metadata_entry`")

        if 'id' in params and not re.search('^urn:vcloud:.+$', params['id']):
            raise ValueError("Invalid value for parameter `id` when calling `get_metadata_entry`, must conform to the pattern `/^urn:vcloud:.+$/`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'metadata_id' in params:
            path_params['metadataId'] = params['metadata_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}/metadata/{metadataId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEntry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def resolve_defined_entity(self, id, **kwargs):
        """
        Validates the defined entity against the entity type schema.
        Validates the defined entity against the entity type schema. If the validation is successful, the entity will transition to a \"RESOLVED\" state. Otherwise, it will transition to an \"ERROR\" state. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resolve_defined_entity(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :return: EntityState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.resolve_defined_entity_with_http_info(id, **kwargs)
        else:
            (data) = self.resolve_defined_entity_with_http_info(id, **kwargs)
            return data

    def resolve_defined_entity_with_http_info(self, id, **kwargs):
        """
        Validates the defined entity against the entity type schema.
        Validates the defined entity against the entity type schema. If the validation is successful, the entity will transition to a \"RESOLVED\" state. Otherwise, it will transition to an \"ERROR\" state. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.resolve_defined_entity_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :return: EntityState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolve_defined_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resolve_defined_entity`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}/resolve', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EntityState',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_defined_entity(self, entity, id, **kwargs):
        """
        Updates the defined entity with the unique identifier (URN)
        Update the defined entity with the unique identifier (URN)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_defined_entity(entity, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DefinedEntity entity: (required)
        :param str id: (required)
        :param str invoke_hooks: Only users with Admin FullControl access to the Entity Type can pass this parameter. The default value is 'true'. 
        :return: DefinedEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_defined_entity_with_http_info(entity, id, **kwargs)
        else:
            (data) = self.update_defined_entity_with_http_info(entity, id, **kwargs)
            return data

    def update_defined_entity_with_http_info(self, entity, id, **kwargs):
        """
        Updates the defined entity with the unique identifier (URN)
        Update the defined entity with the unique identifier (URN)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_defined_entity_with_http_info(entity, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DefinedEntity entity: (required)
        :param str id: (required)
        :param str invoke_hooks: Only users with Admin FullControl access to the Entity Type can pass this parameter. The default value is 'true'. 
        :return: DefinedEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity', 'id', 'invoke_hooks']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_defined_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity' is set
        if ('entity' not in params) or (params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `update_defined_entity`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_defined_entity`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'invoke_hooks' in params:
            query_params.append(('invokeHooks', params['invoke_hooks']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'entity' in params:
            body_params = params['entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DefinedEntity',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_metadata_entry(self, entry, id, metadata_id, **kwargs):
        """
        Update the value of a single key-value metadata entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_metadata_entry(entry, id, metadata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetadataEntry entry: (required)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str metadata_id: a metadata vcloud id urn (required)
        :return: MetadataEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_metadata_entry_with_http_info(entry, id, metadata_id, **kwargs)
        else:
            (data) = self.update_metadata_entry_with_http_info(entry, id, metadata_id, **kwargs)
            return data

    def update_metadata_entry_with_http_info(self, entry, id, metadata_id, **kwargs):
        """
        Update the value of a single key-value metadata entry.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_metadata_entry_with_http_info(entry, id, metadata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MetadataEntry entry: (required)
        :param str id: the URN of the entity the entry is attached to. (required)
        :param str metadata_id: a metadata vcloud id urn (required)
        :return: MetadataEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entry', 'id', 'metadata_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadata_entry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entry' is set
        if ('entry' not in params) or (params['entry'] is None):
            raise ValueError("Missing the required parameter `entry` when calling `update_metadata_entry`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_metadata_entry`")
        # verify the required parameter 'metadata_id' is set
        if ('metadata_id' not in params) or (params['metadata_id'] is None):
            raise ValueError("Missing the required parameter `metadata_id` when calling `update_metadata_entry`")

        if 'id' in params and not re.search('^urn:vcloud:.+$', params['id']):
            raise ValueError("Invalid value for parameter `id` when calling `update_metadata_entry`, must conform to the pattern `/^urn:vcloud:.+$/`")

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'metadata_id' in params:
            path_params['metadataId'] = params['metadata_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'entry' in params:
            body_params = params['entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/entities/{id}/metadata/{metadataId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MetadataEntry',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
