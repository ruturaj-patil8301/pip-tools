# coding: utf-8

"""
    VMware Cloud Director OpenAPI

    VMware Cloud Director OpenAPI is a new API that is defined using the OpenAPI standards.<br/> This ReSTful API borrows some elements of the legacy VMware Cloud Director API and establishes new patterns for use as described below. <h4>Authentication</h4> Authentication and Authorization schemes are the same as those for the legacy APIs. You can authenticate using the JWT token via the <code>Authorization</code> header or specifying a session using <code>x-vcloud-authorization</code> (The latter form is deprecated). <h4>Operation Patterns</h4> This API follows the following general guidelines to establish a consistent CRUD pattern: <table> <tr>   <th>Operation</th><th>Description</th><th>Response Code</th><th>Response Content</th> </tr><tr>   <td>GET /items<td>Returns a paginated list of items<td>200<td>Response will include Navigational links to the items in the list. </tr><tr>   <td>POST /items<td>Returns newly created item<td>201<td>Content-Location header links to the newly created item </tr><tr>   <td>GET /items/urn<td>Returns an individual item<td>200<td>A single item using same data type as that included in list above </tr><tr>   <td>PUT /items/urn<td>Updates an individual item<td>200<td>Updated view of the item is returned </tr><tr>   <td>DELETE /items/urn<td>Deletes the item<td>204<td>No content is returned. </tr> </table> <h5>Asynchronous operations</h5> Asynchronous operations are determined by the server. In those cases, instead of responding as described above, the server responds with an HTTP Response code 202 and an empty body. The tracking task (which is the same task as all legacy API operations use) is linked via the URI provided in the <code>Location</code> header.<br/> All API calls can choose to service a request asynchronously or synchronously as determined by the server upon interpreting the request. Operations that choose to exhibit this dual behavior will have both options documented by specifying both response code(s) below. The caller must be prepared to handle responses to such API calls by inspecting the HTTP Response code. <h5>Error Conditions</h5> <b>All</b> operations report errors using the following error reporting rules: <ul>   <li>400: Bad Request - In event of bad request due to incorrect data or other user error</li>   <li>401: Bad Request - If user is unauthenticated or their session has expired</li>   <li>403: Forbidden - If the user is not authorized or the entity does not exist</li> </ul> <h4>OpenAPI Design Concepts and Principles</h4> <ul>   <li>IDs are full Uniform Resource Names (URNs).</li>   <li>OpenAPI's <code>Content-Type</code> is always <code>application/json</code></li>   <li>REST links are in the Link header.</li>   <ul>     <li>Multiple relationships for any link are represented by multiple values in a space-separated list.</li>     <li>Links have a custom VMware Cloud Director-specific &quot;model&quot; attribute that hints at the applicable data         type for the links.</li>     <li>title + rel + model attributes evaluates to a unique link.</li>     <li>Links follow Hypermedia as the Engine of Application State (HATEOAS) principles. Links are present if         certain operations are present and permitted for the user&quot;s current role and the state of the         referred entities.</li>   </ul>   <li>APIs follow a flat structure relying on cross-referencing other entities instead of the navigational style       used by the legacy VMware Cloud Director APIs.</li>   <li>Most endpoints that return a list support filtering and sorting similar to the query service in the legacy       VMware Cloud Director APIs.</li>   <li>Accept header must be included to specify the API version for the request similar to calls to existing legacy       VMware Cloud Director APIs.</li>   <li>Each feature has a version in the path element present in its URL.<br/>       <b>Note</b> API URL's without a version in their paths must be considered experimental.</li> </ul> 

    OpenAPI spec version: 36.0
    Contact: https://code.vmware.com/support
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class QuotaPolicyAssignmentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def assign_quota_policy_to_group(self, quota_policy_reference, group_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target group. An empty payload is used to unassign an existing quota policy from a given group. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_group(quota_policy_reference, group_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str group_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_quota_policy_to_group_with_http_info(quota_policy_reference, group_urn, **kwargs)
        else:
            (data) = self.assign_quota_policy_to_group_with_http_info(quota_policy_reference, group_urn, **kwargs)
            return data

    def assign_quota_policy_to_group_with_http_info(self, quota_policy_reference, group_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target group. An empty payload is used to unassign an existing quota policy from a given group. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_group_with_http_info(quota_policy_reference, group_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str group_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_policy_reference', 'group_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_quota_policy_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quota_policy_reference' is set
        if ('quota_policy_reference' not in params) or (params['quota_policy_reference'] is None):
            raise ValueError("Missing the required parameter `quota_policy_reference` when calling `assign_quota_policy_to_group`")
        # verify the required parameter 'group_urn' is set
        if ('group_urn' not in params) or (params['group_urn'] is None):
            raise ValueError("Missing the required parameter `group_urn` when calling `assign_quota_policy_to_group`")


        collection_formats = {}

        path_params = {}
        if 'group_urn' in params:
            path_params['groupUrn'] = params['group_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_policy_reference' in params:
            body_params = params['quota_policy_reference']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/groups/{groupUrn}/quotaPolicy', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def assign_quota_policy_to_org(self, quota_policy_reference, org_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target organization. An empty payload is used to unassign an existing quota policy from a given organization. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_org(quota_policy_reference, org_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str org_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_quota_policy_to_org_with_http_info(quota_policy_reference, org_urn, **kwargs)
        else:
            (data) = self.assign_quota_policy_to_org_with_http_info(quota_policy_reference, org_urn, **kwargs)
            return data

    def assign_quota_policy_to_org_with_http_info(self, quota_policy_reference, org_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target organization. An empty payload is used to unassign an existing quota policy from a given organization. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_org_with_http_info(quota_policy_reference, org_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str org_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_policy_reference', 'org_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_quota_policy_to_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quota_policy_reference' is set
        if ('quota_policy_reference' not in params) or (params['quota_policy_reference'] is None):
            raise ValueError("Missing the required parameter `quota_policy_reference` when calling `assign_quota_policy_to_org`")
        # verify the required parameter 'org_urn' is set
        if ('org_urn' not in params) or (params['org_urn'] is None):
            raise ValueError("Missing the required parameter `org_urn` when calling `assign_quota_policy_to_org`")


        collection_formats = {}

        path_params = {}
        if 'org_urn' in params:
            path_params['orgUrn'] = params['org_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_policy_reference' in params:
            body_params = params['quota_policy_reference']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/orgs/{orgUrn}/quotaPolicy', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def assign_quota_policy_to_user(self, quota_policy_reference, user_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target user. An empty payload is used to unassign an existing quota policy from a given user. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_user(quota_policy_reference, user_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str user_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_quota_policy_to_user_with_http_info(quota_policy_reference, user_urn, **kwargs)
        else:
            (data) = self.assign_quota_policy_to_user_with_http_info(quota_policy_reference, user_urn, **kwargs)
            return data

    def assign_quota_policy_to_user_with_http_info(self, quota_policy_reference, user_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target user. An empty payload is used to unassign an existing quota policy from a given user. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_user_with_http_info(quota_policy_reference, user_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str user_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_policy_reference', 'user_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_quota_policy_to_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quota_policy_reference' is set
        if ('quota_policy_reference' not in params) or (params['quota_policy_reference'] is None):
            raise ValueError("Missing the required parameter `quota_policy_reference` when calling `assign_quota_policy_to_user`")
        # verify the required parameter 'user_urn' is set
        if ('user_urn' not in params) or (params['user_urn'] is None):
            raise ValueError("Missing the required parameter `user_urn` when calling `assign_quota_policy_to_user`")


        collection_formats = {}

        path_params = {}
        if 'user_urn' in params:
            path_params['userUrn'] = params['user_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_policy_reference' in params:
            body_params = params['quota_policy_reference']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/users/{userUrn}/quotaPolicy', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def assign_quota_policy_to_v_app(self, quota_policy_reference, vapp_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target vapp. An empty payload is used to unassign an existing quota policy from a given vapp. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_v_app(quota_policy_reference, vapp_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str vapp_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.assign_quota_policy_to_v_app_with_http_info(quota_policy_reference, vapp_urn, **kwargs)
        else:
            (data) = self.assign_quota_policy_to_v_app_with_http_info(quota_policy_reference, vapp_urn, **kwargs)
            return data

    def assign_quota_policy_to_v_app_with_http_info(self, quota_policy_reference, vapp_urn, **kwargs):
        """
        Assign or unassign a quota policy to a given target vapp. An empty payload is used to unassign an existing quota policy from a given vapp. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.assign_quota_policy_to_v_app_with_http_info(quota_policy_reference, vapp_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AssignedQuotaPolicy quota_policy_reference: (required)
        :param str vapp_urn: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quota_policy_reference', 'vapp_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_quota_policy_to_v_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quota_policy_reference' is set
        if ('quota_policy_reference' not in params) or (params['quota_policy_reference'] is None):
            raise ValueError("Missing the required parameter `quota_policy_reference` when calling `assign_quota_policy_to_v_app`")
        # verify the required parameter 'vapp_urn' is set
        if ('vapp_urn' not in params) or (params['vapp_urn'] is None):
            raise ValueError("Missing the required parameter `vapp_urn` when calling `assign_quota_policy_to_v_app`")


        collection_formats = {}

        path_params = {}
        if 'vapp_urn' in params:
            path_params['vappUrn'] = params['vapp_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quota_policy_reference' in params:
            body_params = params['quota_policy_reference']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/vapps/{vappUrn}/quotaPolicy', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_group_assigned_quota_policy(self, group_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_assigned_quota_policy(group_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_group_assigned_quota_policy_with_http_info(group_urn, **kwargs)
        else:
            (data) = self.get_group_assigned_quota_policy_with_http_info(group_urn, **kwargs)
            return data

    def get_group_assigned_quota_policy_with_http_info(self, group_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_group_assigned_quota_policy_with_http_info(group_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_assigned_quota_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_urn' is set
        if ('group_urn' not in params) or (params['group_urn'] is None):
            raise ValueError("Missing the required parameter `group_urn` when calling `get_group_assigned_quota_policy`")


        collection_formats = {}

        path_params = {}
        if 'group_urn' in params:
            path_params['groupUrn'] = params['group_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/groups/{groupUrn}/quotaPolicy', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignedQuotaPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_org_assigned_quota_policy(self, org_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given organization.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_org_assigned_quota_policy(org_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str org_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_org_assigned_quota_policy_with_http_info(org_urn, **kwargs)
        else:
            (data) = self.get_org_assigned_quota_policy_with_http_info(org_urn, **kwargs)
            return data

    def get_org_assigned_quota_policy_with_http_info(self, org_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given organization.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_org_assigned_quota_policy_with_http_info(org_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str org_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_assigned_quota_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_urn' is set
        if ('org_urn' not in params) or (params['org_urn'] is None):
            raise ValueError("Missing the required parameter `org_urn` when calling `get_org_assigned_quota_policy`")


        collection_formats = {}

        path_params = {}
        if 'org_urn' in params:
            path_params['orgUrn'] = params['org_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/orgs/{orgUrn}/quotaPolicy', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignedQuotaPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_assigned_quota_policy(self, user_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_assigned_quota_policy(user_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_assigned_quota_policy_with_http_info(user_urn, **kwargs)
        else:
            (data) = self.get_user_assigned_quota_policy_with_http_info(user_urn, **kwargs)
            return data

    def get_user_assigned_quota_policy_with_http_info(self, user_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_assigned_quota_policy_with_http_info(user_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_assigned_quota_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_urn' is set
        if ('user_urn' not in params) or (params['user_urn'] is None):
            raise ValueError("Missing the required parameter `user_urn` when calling `get_user_assigned_quota_policy`")


        collection_formats = {}

        path_params = {}
        if 'user_urn' in params:
            path_params['userUrn'] = params['user_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/users/{userUrn}/quotaPolicy', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignedQuotaPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_v_app_assigned_quota_policy(self, vapp_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given vapp.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_v_app_assigned_quota_policy(vapp_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str vapp_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_v_app_assigned_quota_policy_with_http_info(vapp_urn, **kwargs)
        else:
            (data) = self.get_v_app_assigned_quota_policy_with_http_info(vapp_urn, **kwargs)
            return data

    def get_v_app_assigned_quota_policy_with_http_info(self, vapp_urn, **kwargs):
        """
        Get the assigned quota policy reference for the given vapp.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_v_app_assigned_quota_policy_with_http_info(vapp_urn, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str vapp_urn: (required)
        :return: AssignedQuotaPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vapp_urn']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v_app_assigned_quota_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vapp_urn' is set
        if ('vapp_urn' not in params) or (params['vapp_urn'] is None):
            raise ValueError("Missing the required parameter `vapp_urn` when calling `get_v_app_assigned_quota_policy`")


        collection_formats = {}

        path_params = {}
        if 'vapp_urn' in params:
            path_params['vappUrn'] = params['vapp_urn']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['ApiKeyAuth']

        return self.api_client.call_api('/1.0.0/vapps/{vappUrn}/quotaPolicy', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AssignedQuotaPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
