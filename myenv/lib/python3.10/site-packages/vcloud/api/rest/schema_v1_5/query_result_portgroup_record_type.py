"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re
from .query_result_record_type import QueryResultRecordType


class QueryResultPortgroupRecordType(QueryResultRecordType):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'moref': 'str',
        'name': 'str',
        'portgroup_type': 'str',
        'vc': 'str',
        'vc_name': 'str',
        'is_vc_enabled': 'bool',
        'network': 'str',
        'network_name': 'str',
        'scope_type': 'int',
        'vlan_id': 'int'
    }

    attribute_map = {
        'moref': 'moref',
        'name': 'name',
        'portgroup_type': 'portgroupType',
        'vc': 'vc',
        'vc_name': 'vcName',
        'is_vc_enabled': 'isVCEnabled',
        'network': 'network',
        'network_name': 'networkName',
        'scope_type': 'scopeType',
        'vlan_id': 'vlanId'
    }

    def __init__(self, moref=None,name=None,portgroup_type=None,vc=None,vc_name=None,is_vc_enabled=None,network=None,network_name=None,scope_type=None,vlan_id=None):
        self._moref = None
        self._name = None
        self._portgroup_type = None
        self._vc = None
        self._vc_name = None
        self._is_vc_enabled = None
        self._network = None
        self._network_name = None
        self._scope_type = None
        self._vlan_id = None

        if moref is not None:
            self.moref = moref
        if name is not None:
            self.name = name
        if portgroup_type is not None:
            self.portgroup_type = portgroup_type
        if vc is not None:
            self.vc = vc
        if vc_name is not None:
            self.vc_name = vc_name
        if is_vc_enabled is not None:
            self.is_vc_enabled = is_vc_enabled
        if network is not None:
            self.network = network
        if network_name is not None:
            self.network_name = network_name
        if scope_type is not None:
            self.scope_type = scope_type
        if vlan_id is not None:
            self.vlan_id = vlan_id

    @property
    def moref(self):
        return self._moref
    
    @moref.setter
    def moref(self, moref):
        self._moref = moref

    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, name):
        self._name = name

    @property
    def portgroup_type(self):
        return self._portgroup_type
    
    @portgroup_type.setter
    def portgroup_type(self, portgroup_type):
        self._portgroup_type = portgroup_type

    @property
    def vc(self):
        return self._vc
    
    @vc.setter
    def vc(self, vc):
        self._vc = vc

    @property
    def vc_name(self):
        return self._vc_name
    
    @vc_name.setter
    def vc_name(self, vc_name):
        self._vc_name = vc_name

    @property
    def is_vc_enabled(self):
        return self._is_vc_enabled
    
    @is_vc_enabled.setter
    def is_vc_enabled(self, is_vc_enabled):
        self._is_vc_enabled = is_vc_enabled

    @property
    def network(self):
        return self._network
    
    @network.setter
    def network(self, network):
        self._network = network

    @property
    def network_name(self):
        return self._network_name
    
    @network_name.setter
    def network_name(self, network_name):
        self._network_name = network_name

    @property
    def scope_type(self):
        return self._scope_type
    
    @scope_type.setter
    def scope_type(self, scope_type):
        self._scope_type = scope_type

    @property
    def vlan_id(self):
        return self._vlan_id
    
    @vlan_id.setter
    def vlan_id(self, vlan_id):
        self._vlan_id = vlan_id


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultPortgroupRecordType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
