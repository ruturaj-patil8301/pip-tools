"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re
from .query_result_record_type import QueryResultRecordType


class QueryResultDiskRecordType(QueryResultRecordType):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'vdc': 'str',
        'description': 'str',
        'size_b': 'int',
        'size_mb': 'int',
        'iops': 'int',
        'encrypted': 'bool',
        'uuid': 'str',
        'datastore': 'str',
        'datastore_name': 'str',
        'owner_name': 'str',
        'vdc_name': 'str',
        'task': 'str',
        'storage_profile': 'str',
        'storage_profile_name': 'str',
        'status': 'str',
        'bus_type': 'str',
        'bus_type_desc': 'str',
        'bus_sub_type': 'str',
        'attached_vm_count': 'int',
        'is_attached': 'bool',
        'is_shareable': 'bool',
        'sharing_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'vdc': 'vdc',
        'description': 'description',
        'size_b': 'sizeB',
        'size_mb': 'sizeMb',
        'iops': 'iops',
        'encrypted': 'encrypted',
        'uuid': 'uuid',
        'datastore': 'datastore',
        'datastore_name': 'datastoreName',
        'owner_name': 'ownerName',
        'vdc_name': 'vdcName',
        'task': 'task',
        'storage_profile': 'storageProfile',
        'storage_profile_name': 'storageProfileName',
        'status': 'status',
        'bus_type': 'busType',
        'bus_type_desc': 'busTypeDesc',
        'bus_sub_type': 'busSubType',
        'attached_vm_count': 'attachedVmCount',
        'is_attached': 'isAttached',
        'is_shareable': 'isShareable',
        'sharing_type': 'sharingType'
    }

    def __init__(self, name=None,vdc=None,description=None,size_b=None,size_mb=None,iops=None,encrypted=None,uuid=None,datastore=None,datastore_name=None,owner_name=None,vdc_name=None,task=None,storage_profile=None,storage_profile_name=None,status=None,bus_type=None,bus_type_desc=None,bus_sub_type=None,attached_vm_count=None,is_attached=None,is_shareable=None,sharing_type=None):
        self._name = None
        self._vdc = None
        self._description = None
        self._size_b = None
        self._size_mb = None
        self._iops = None
        self._encrypted = None
        self._uuid = None
        self._datastore = None
        self._datastore_name = None
        self._owner_name = None
        self._vdc_name = None
        self._task = None
        self._storage_profile = None
        self._storage_profile_name = None
        self._status = None
        self._bus_type = None
        self._bus_type_desc = None
        self._bus_sub_type = None
        self._attached_vm_count = None
        self._is_attached = None
        self._is_shareable = None
        self._sharing_type = None

        if name is not None:
            self.name = name
        if vdc is not None:
            self.vdc = vdc
        if description is not None:
            self.description = description
        if size_b is not None:
            self.size_b = size_b
        if size_mb is not None:
            self.size_mb = size_mb
        if iops is not None:
            self.iops = iops
        if encrypted is not None:
            self.encrypted = encrypted
        if uuid is not None:
            self.uuid = uuid
        if datastore is not None:
            self.datastore = datastore
        if datastore_name is not None:
            self.datastore_name = datastore_name
        if owner_name is not None:
            self.owner_name = owner_name
        if vdc_name is not None:
            self.vdc_name = vdc_name
        if task is not None:
            self.task = task
        if storage_profile is not None:
            self.storage_profile = storage_profile
        if storage_profile_name is not None:
            self.storage_profile_name = storage_profile_name
        if status is not None:
            self.status = status
        if bus_type is not None:
            self.bus_type = bus_type
        if bus_type_desc is not None:
            self.bus_type_desc = bus_type_desc
        if bus_sub_type is not None:
            self.bus_sub_type = bus_sub_type
        if attached_vm_count is not None:
            self.attached_vm_count = attached_vm_count
        if is_attached is not None:
            self.is_attached = is_attached
        if is_shareable is not None:
            self.is_shareable = is_shareable
        if sharing_type is not None:
            self.sharing_type = sharing_type

    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, name):
        self._name = name

    @property
    def vdc(self):
        return self._vdc
    
    @vdc.setter
    def vdc(self, vdc):
        self._vdc = vdc

    @property
    def description(self):
        return self._description
    
    @description.setter
    def description(self, description):
        self._description = description

    @property
    def size_b(self):
        return self._size_b
    
    @size_b.setter
    def size_b(self, size_b):
        self._size_b = size_b

    @property
    def size_mb(self):
        return self._size_mb
    
    @size_mb.setter
    def size_mb(self, size_mb):
        self._size_mb = size_mb

    @property
    def iops(self):
        return self._iops
    
    @iops.setter
    def iops(self, iops):
        self._iops = iops

    @property
    def encrypted(self):
        return self._encrypted
    
    @encrypted.setter
    def encrypted(self, encrypted):
        self._encrypted = encrypted

    @property
    def uuid(self):
        return self._uuid
    
    @uuid.setter
    def uuid(self, uuid):
        self._uuid = uuid

    @property
    def datastore(self):
        return self._datastore
    
    @datastore.setter
    def datastore(self, datastore):
        self._datastore = datastore

    @property
    def datastore_name(self):
        return self._datastore_name
    
    @datastore_name.setter
    def datastore_name(self, datastore_name):
        self._datastore_name = datastore_name

    @property
    def owner_name(self):
        return self._owner_name
    
    @owner_name.setter
    def owner_name(self, owner_name):
        self._owner_name = owner_name

    @property
    def vdc_name(self):
        return self._vdc_name
    
    @vdc_name.setter
    def vdc_name(self, vdc_name):
        self._vdc_name = vdc_name

    @property
    def task(self):
        return self._task
    
    @task.setter
    def task(self, task):
        self._task = task

    @property
    def storage_profile(self):
        return self._storage_profile
    
    @storage_profile.setter
    def storage_profile(self, storage_profile):
        self._storage_profile = storage_profile

    @property
    def storage_profile_name(self):
        return self._storage_profile_name
    
    @storage_profile_name.setter
    def storage_profile_name(self, storage_profile_name):
        self._storage_profile_name = storage_profile_name

    @property
    def status(self):
        return self._status
    
    @status.setter
    def status(self, status):
        self._status = status

    @property
    def bus_type(self):
        return self._bus_type
    
    @bus_type.setter
    def bus_type(self, bus_type):
        self._bus_type = bus_type

    @property
    def bus_type_desc(self):
        return self._bus_type_desc
    
    @bus_type_desc.setter
    def bus_type_desc(self, bus_type_desc):
        self._bus_type_desc = bus_type_desc

    @property
    def bus_sub_type(self):
        return self._bus_sub_type
    
    @bus_sub_type.setter
    def bus_sub_type(self, bus_sub_type):
        self._bus_sub_type = bus_sub_type

    @property
    def attached_vm_count(self):
        return self._attached_vm_count
    
    @attached_vm_count.setter
    def attached_vm_count(self, attached_vm_count):
        self._attached_vm_count = attached_vm_count

    @property
    def is_attached(self):
        return self._is_attached
    
    @is_attached.setter
    def is_attached(self, is_attached):
        self._is_attached = is_attached

    @property
    def is_shareable(self):
        return self._is_shareable
    
    @is_shareable.setter
    def is_shareable(self, is_shareable):
        self._is_shareable = is_shareable

    @property
    def sharing_type(self):
        return self._sharing_type
    
    @sharing_type.setter
    def sharing_type(self, sharing_type):
        self._sharing_type = sharing_type


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultDiskRecordType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
