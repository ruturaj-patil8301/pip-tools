"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re


class Protocols(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tcp': 'bool',
        'udp': 'bool',
        'icmp': 'bool',
        'any': 'bool',
        'other': 'str'
    }

    attribute_map = {
        'tcp': 'tcp',
        'udp': 'udp',
        'icmp': 'icmp',
        'any': 'any',
        'other': 'other'
    }

    def __init__(self, tcp=None,udp=None,icmp=None,any=None,other=None):
        self._tcp = None
        self._udp = None
        self._icmp = None
        self._any = None
        self._other = None

        if tcp is not None:
            self.tcp = tcp
        if udp is not None:
            self.udp = udp
        if icmp is not None:
            self.icmp = icmp
        if any is not None:
            self.any = any
        if other is not None:
            self.other = other

    @property
    def tcp(self):
        return self._tcp
    
    @tcp.setter
    def tcp(self, tcp):
        self._tcp = tcp

    @property
    def udp(self):
        return self._udp
    
    @udp.setter
    def udp(self, udp):
        self._udp = udp

    @property
    def icmp(self):
        return self._icmp
    
    @icmp.setter
    def icmp(self, icmp):
        self._icmp = icmp

    @property
    def any(self):
        return self._any
    
    @any.setter
    def any(self, any):
        self._any = any

    @property
    def other(self):
        return self._other
    
    @other.setter
    def other(self, other):
        self._other = other


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Protocols):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
