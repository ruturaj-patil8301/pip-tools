"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re
from .query_result_record_type import QueryResultRecordType


class QueryResultAdminVAppRecordType(QueryResultRecordType):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'org': 'str',
        'vdc': 'str',
        'vdc_name': 'str',
        'is_vdc_enabled': 'bool',
        'description': 'str',
        'is_enabled': 'bool',
        'is_busy': 'bool',
        'creation_date': 'str',
        'status': 'str',
        'owner_name': 'str',
        'storage_kb': 'int',
        'number_of_v_ms': 'int',
        'cpu_allocation_mhz': 'int',
        'memory_allocation_mb': 'int',
        'is_deployed': 'bool',
        'is_in_maintenance_mode': 'bool',
        'is_auto_nature': 'bool',
        'is_expired': 'bool',
        'number_of_cpus': 'int',
        'total_storage_allocated_mb': 'int'
    }

    attribute_map = {
        'name': 'name',
        'org': 'org',
        'vdc': 'vdc',
        'vdc_name': 'vdcName',
        'is_vdc_enabled': 'isVdcEnabled',
        'description': 'description',
        'is_enabled': 'isEnabled',
        'is_busy': 'isBusy',
        'creation_date': 'creationDate',
        'status': 'status',
        'owner_name': 'ownerName',
        'storage_kb': 'storageKB',
        'number_of_v_ms': 'numberOfVMs',
        'cpu_allocation_mhz': 'cpuAllocationMhz',
        'memory_allocation_mb': 'memoryAllocationMB',
        'is_deployed': 'isDeployed',
        'is_in_maintenance_mode': 'isInMaintenanceMode',
        'is_auto_nature': 'isAutoNature',
        'is_expired': 'isExpired',
        'number_of_cpus': 'numberOfCpus',
        'total_storage_allocated_mb': 'totalStorageAllocatedMb'
    }

    def __init__(self, name=None,org=None,vdc=None,vdc_name=None,is_vdc_enabled=None,description=None,is_enabled=None,is_busy=None,creation_date=None,status=None,owner_name=None,storage_kb=None,number_of_v_ms=None,cpu_allocation_mhz=None,memory_allocation_mb=None,is_deployed=None,is_in_maintenance_mode=None,is_auto_nature=None,is_expired=None,number_of_cpus=None,total_storage_allocated_mb=None):
        self._name = None
        self._org = None
        self._vdc = None
        self._vdc_name = None
        self._is_vdc_enabled = None
        self._description = None
        self._is_enabled = None
        self._is_busy = None
        self._creation_date = None
        self._status = None
        self._owner_name = None
        self._storage_kb = None
        self._number_of_v_ms = None
        self._cpu_allocation_mhz = None
        self._memory_allocation_mb = None
        self._is_deployed = None
        self._is_in_maintenance_mode = None
        self._is_auto_nature = None
        self._is_expired = None
        self._number_of_cpus = None
        self._total_storage_allocated_mb = None

        if name is not None:
            self.name = name
        if org is not None:
            self.org = org
        if vdc is not None:
            self.vdc = vdc
        if vdc_name is not None:
            self.vdc_name = vdc_name
        if is_vdc_enabled is not None:
            self.is_vdc_enabled = is_vdc_enabled
        if description is not None:
            self.description = description
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_busy is not None:
            self.is_busy = is_busy
        if creation_date is not None:
            self.creation_date = creation_date
        if status is not None:
            self.status = status
        if owner_name is not None:
            self.owner_name = owner_name
        if storage_kb is not None:
            self.storage_kb = storage_kb
        if number_of_v_ms is not None:
            self.number_of_v_ms = number_of_v_ms
        if cpu_allocation_mhz is not None:
            self.cpu_allocation_mhz = cpu_allocation_mhz
        if memory_allocation_mb is not None:
            self.memory_allocation_mb = memory_allocation_mb
        if is_deployed is not None:
            self.is_deployed = is_deployed
        if is_in_maintenance_mode is not None:
            self.is_in_maintenance_mode = is_in_maintenance_mode
        if is_auto_nature is not None:
            self.is_auto_nature = is_auto_nature
        if is_expired is not None:
            self.is_expired = is_expired
        if number_of_cpus is not None:
            self.number_of_cpus = number_of_cpus
        if total_storage_allocated_mb is not None:
            self.total_storage_allocated_mb = total_storage_allocated_mb

    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, name):
        self._name = name

    @property
    def org(self):
        return self._org
    
    @org.setter
    def org(self, org):
        self._org = org

    @property
    def vdc(self):
        return self._vdc
    
    @vdc.setter
    def vdc(self, vdc):
        self._vdc = vdc

    @property
    def vdc_name(self):
        return self._vdc_name
    
    @vdc_name.setter
    def vdc_name(self, vdc_name):
        self._vdc_name = vdc_name

    @property
    def is_vdc_enabled(self):
        return self._is_vdc_enabled
    
    @is_vdc_enabled.setter
    def is_vdc_enabled(self, is_vdc_enabled):
        self._is_vdc_enabled = is_vdc_enabled

    @property
    def description(self):
        return self._description
    
    @description.setter
    def description(self, description):
        self._description = description

    @property
    def is_enabled(self):
        return self._is_enabled
    
    @is_enabled.setter
    def is_enabled(self, is_enabled):
        self._is_enabled = is_enabled

    @property
    def is_busy(self):
        return self._is_busy
    
    @is_busy.setter
    def is_busy(self, is_busy):
        self._is_busy = is_busy

    @property
    def creation_date(self):
        return self._creation_date
    
    @creation_date.setter
    def creation_date(self, creation_date):
        self._creation_date = creation_date

    @property
    def status(self):
        return self._status
    
    @status.setter
    def status(self, status):
        self._status = status

    @property
    def owner_name(self):
        return self._owner_name
    
    @owner_name.setter
    def owner_name(self, owner_name):
        self._owner_name = owner_name

    @property
    def storage_kb(self):
        return self._storage_kb
    
    @storage_kb.setter
    def storage_kb(self, storage_kb):
        self._storage_kb = storage_kb

    @property
    def number_of_v_ms(self):
        return self._number_of_v_ms
    
    @number_of_v_ms.setter
    def number_of_v_ms(self, number_of_v_ms):
        self._number_of_v_ms = number_of_v_ms

    @property
    def cpu_allocation_mhz(self):
        return self._cpu_allocation_mhz
    
    @cpu_allocation_mhz.setter
    def cpu_allocation_mhz(self, cpu_allocation_mhz):
        self._cpu_allocation_mhz = cpu_allocation_mhz

    @property
    def memory_allocation_mb(self):
        return self._memory_allocation_mb
    
    @memory_allocation_mb.setter
    def memory_allocation_mb(self, memory_allocation_mb):
        self._memory_allocation_mb = memory_allocation_mb

    @property
    def is_deployed(self):
        return self._is_deployed
    
    @is_deployed.setter
    def is_deployed(self, is_deployed):
        self._is_deployed = is_deployed

    @property
    def is_in_maintenance_mode(self):
        return self._is_in_maintenance_mode
    
    @is_in_maintenance_mode.setter
    def is_in_maintenance_mode(self, is_in_maintenance_mode):
        self._is_in_maintenance_mode = is_in_maintenance_mode

    @property
    def is_auto_nature(self):
        return self._is_auto_nature
    
    @is_auto_nature.setter
    def is_auto_nature(self, is_auto_nature):
        self._is_auto_nature = is_auto_nature

    @property
    def is_expired(self):
        return self._is_expired
    
    @is_expired.setter
    def is_expired(self, is_expired):
        self._is_expired = is_expired

    @property
    def number_of_cpus(self):
        return self._number_of_cpus
    
    @number_of_cpus.setter
    def number_of_cpus(self, number_of_cpus):
        self._number_of_cpus = number_of_cpus

    @property
    def total_storage_allocated_mb(self):
        return self._total_storage_allocated_mb
    
    @total_storage_allocated_mb.setter
    def total_storage_allocated_mb(self, total_storage_allocated_mb):
        self._total_storage_allocated_mb = total_storage_allocated_mb


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultAdminVAppRecordType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
