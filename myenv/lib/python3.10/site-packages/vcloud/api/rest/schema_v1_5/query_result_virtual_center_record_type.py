"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re
from .query_result_record_type import QueryResultRecordType


class QueryResultVirtualCenterRecordType(QueryResultRecordType):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'user_name': 'str',
        'is_enabled': 'bool',
        'vc_version': 'str',
        'status': 'str',
        'vsm_ip': 'str',
        'vcproxy': 'str',
        'is_busy': 'bool',
        'listener_state': 'str',
        'uuid': 'str',
        'is_supported': 'bool',
        'is_tenant_scoped': 'bool',
        'is_provider_scoped': 'bool',
        'cluster_health_status': 'str',
        'clusters_count': 'int',
        'total_vm_count': 'int',
        'powered_on_vm_count': 'int',
        'total_mem_mb': 'int',
        'reserved_mem_mb': 'int',
        'demanded_mem_mb': 'int',
        'total_cpu_mhz': 'int',
        'reserved_cpu_mhz': 'int',
        'demanded_cpu_mhz': 'int',
        'disk_size_bytes': 'int',
        'disk_free_bytes': 'int',
        'disk_uncommitted_bytes': 'int',
        'disk_size_mb': 'int',
        'disk_free_mb': 'int',
        'disk_uncommitted_mb': 'int',
        'vsm_version': 'str',
        'has_proxy': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'user_name': 'userName',
        'is_enabled': 'isEnabled',
        'vc_version': 'vcVersion',
        'status': 'status',
        'vsm_ip': 'vsmIP',
        'vcproxy': 'vcproxy',
        'is_busy': 'isBusy',
        'listener_state': 'listenerState',
        'uuid': 'uuid',
        'is_supported': 'isSupported',
        'is_tenant_scoped': 'isTenantScoped',
        'is_provider_scoped': 'isProviderScoped',
        'cluster_health_status': 'clusterHealthStatus',
        'clusters_count': 'clustersCount',
        'total_vm_count': 'totalVmCount',
        'powered_on_vm_count': 'poweredOnVmCount',
        'total_mem_mb': 'totalMemMb',
        'reserved_mem_mb': 'reservedMemMb',
        'demanded_mem_mb': 'demandedMemMb',
        'total_cpu_mhz': 'totalCpuMhz',
        'reserved_cpu_mhz': 'reservedCpuMhz',
        'demanded_cpu_mhz': 'demandedCpuMhz',
        'disk_size_bytes': 'diskSizeBytes',
        'disk_free_bytes': 'diskFreeBytes',
        'disk_uncommitted_bytes': 'diskUncommittedBytes',
        'disk_size_mb': 'diskSizeMb',
        'disk_free_mb': 'diskFreeMb',
        'disk_uncommitted_mb': 'diskUncommittedMb',
        'vsm_version': 'vsmVersion',
        'has_proxy': 'hasProxy'
    }

    def __init__(self, name=None,url=None,user_name=None,is_enabled=None,vc_version=None,status=None,vsm_ip=None,vcproxy=None,is_busy=None,listener_state=None,uuid=None,is_supported=None,is_tenant_scoped=None,is_provider_scoped=None,cluster_health_status=None,clusters_count=None,total_vm_count=None,powered_on_vm_count=None,total_mem_mb=None,reserved_mem_mb=None,demanded_mem_mb=None,total_cpu_mhz=None,reserved_cpu_mhz=None,demanded_cpu_mhz=None,disk_size_bytes=None,disk_free_bytes=None,disk_uncommitted_bytes=None,disk_size_mb=None,disk_free_mb=None,disk_uncommitted_mb=None,vsm_version=None,has_proxy=None):
        self._name = None
        self._url = None
        self._user_name = None
        self._is_enabled = None
        self._vc_version = None
        self._status = None
        self._vsm_ip = None
        self._vcproxy = None
        self._is_busy = None
        self._listener_state = None
        self._uuid = None
        self._is_supported = None
        self._is_tenant_scoped = None
        self._is_provider_scoped = None
        self._cluster_health_status = None
        self._clusters_count = None
        self._total_vm_count = None
        self._powered_on_vm_count = None
        self._total_mem_mb = None
        self._reserved_mem_mb = None
        self._demanded_mem_mb = None
        self._total_cpu_mhz = None
        self._reserved_cpu_mhz = None
        self._demanded_cpu_mhz = None
        self._disk_size_bytes = None
        self._disk_free_bytes = None
        self._disk_uncommitted_bytes = None
        self._disk_size_mb = None
        self._disk_free_mb = None
        self._disk_uncommitted_mb = None
        self._vsm_version = None
        self._has_proxy = None

        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if user_name is not None:
            self.user_name = user_name
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if vc_version is not None:
            self.vc_version = vc_version
        if status is not None:
            self.status = status
        if vsm_ip is not None:
            self.vsm_ip = vsm_ip
        if vcproxy is not None:
            self.vcproxy = vcproxy
        if is_busy is not None:
            self.is_busy = is_busy
        if listener_state is not None:
            self.listener_state = listener_state
        if uuid is not None:
            self.uuid = uuid
        if is_supported is not None:
            self.is_supported = is_supported
        if is_tenant_scoped is not None:
            self.is_tenant_scoped = is_tenant_scoped
        if is_provider_scoped is not None:
            self.is_provider_scoped = is_provider_scoped
        if cluster_health_status is not None:
            self.cluster_health_status = cluster_health_status
        if clusters_count is not None:
            self.clusters_count = clusters_count
        if total_vm_count is not None:
            self.total_vm_count = total_vm_count
        if powered_on_vm_count is not None:
            self.powered_on_vm_count = powered_on_vm_count
        if total_mem_mb is not None:
            self.total_mem_mb = total_mem_mb
        if reserved_mem_mb is not None:
            self.reserved_mem_mb = reserved_mem_mb
        if demanded_mem_mb is not None:
            self.demanded_mem_mb = demanded_mem_mb
        if total_cpu_mhz is not None:
            self.total_cpu_mhz = total_cpu_mhz
        if reserved_cpu_mhz is not None:
            self.reserved_cpu_mhz = reserved_cpu_mhz
        if demanded_cpu_mhz is not None:
            self.demanded_cpu_mhz = demanded_cpu_mhz
        if disk_size_bytes is not None:
            self.disk_size_bytes = disk_size_bytes
        if disk_free_bytes is not None:
            self.disk_free_bytes = disk_free_bytes
        if disk_uncommitted_bytes is not None:
            self.disk_uncommitted_bytes = disk_uncommitted_bytes
        if disk_size_mb is not None:
            self.disk_size_mb = disk_size_mb
        if disk_free_mb is not None:
            self.disk_free_mb = disk_free_mb
        if disk_uncommitted_mb is not None:
            self.disk_uncommitted_mb = disk_uncommitted_mb
        if vsm_version is not None:
            self.vsm_version = vsm_version
        if has_proxy is not None:
            self.has_proxy = has_proxy

    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, name):
        self._name = name

    @property
    def url(self):
        return self._url
    
    @url.setter
    def url(self, url):
        self._url = url

    @property
    def user_name(self):
        return self._user_name
    
    @user_name.setter
    def user_name(self, user_name):
        self._user_name = user_name

    @property
    def is_enabled(self):
        return self._is_enabled
    
    @is_enabled.setter
    def is_enabled(self, is_enabled):
        self._is_enabled = is_enabled

    @property
    def vc_version(self):
        return self._vc_version
    
    @vc_version.setter
    def vc_version(self, vc_version):
        self._vc_version = vc_version

    @property
    def status(self):
        return self._status
    
    @status.setter
    def status(self, status):
        self._status = status

    @property
    def vsm_ip(self):
        return self._vsm_ip
    
    @vsm_ip.setter
    def vsm_ip(self, vsm_ip):
        self._vsm_ip = vsm_ip

    @property
    def vcproxy(self):
        return self._vcproxy
    
    @vcproxy.setter
    def vcproxy(self, vcproxy):
        self._vcproxy = vcproxy

    @property
    def is_busy(self):
        return self._is_busy
    
    @is_busy.setter
    def is_busy(self, is_busy):
        self._is_busy = is_busy

    @property
    def listener_state(self):
        return self._listener_state
    
    @listener_state.setter
    def listener_state(self, listener_state):
        self._listener_state = listener_state

    @property
    def uuid(self):
        return self._uuid
    
    @uuid.setter
    def uuid(self, uuid):
        self._uuid = uuid

    @property
    def is_supported(self):
        return self._is_supported
    
    @is_supported.setter
    def is_supported(self, is_supported):
        self._is_supported = is_supported

    @property
    def is_tenant_scoped(self):
        return self._is_tenant_scoped
    
    @is_tenant_scoped.setter
    def is_tenant_scoped(self, is_tenant_scoped):
        self._is_tenant_scoped = is_tenant_scoped

    @property
    def is_provider_scoped(self):
        return self._is_provider_scoped
    
    @is_provider_scoped.setter
    def is_provider_scoped(self, is_provider_scoped):
        self._is_provider_scoped = is_provider_scoped

    @property
    def cluster_health_status(self):
        return self._cluster_health_status
    
    @cluster_health_status.setter
    def cluster_health_status(self, cluster_health_status):
        self._cluster_health_status = cluster_health_status

    @property
    def clusters_count(self):
        return self._clusters_count
    
    @clusters_count.setter
    def clusters_count(self, clusters_count):
        self._clusters_count = clusters_count

    @property
    def total_vm_count(self):
        return self._total_vm_count
    
    @total_vm_count.setter
    def total_vm_count(self, total_vm_count):
        self._total_vm_count = total_vm_count

    @property
    def powered_on_vm_count(self):
        return self._powered_on_vm_count
    
    @powered_on_vm_count.setter
    def powered_on_vm_count(self, powered_on_vm_count):
        self._powered_on_vm_count = powered_on_vm_count

    @property
    def total_mem_mb(self):
        return self._total_mem_mb
    
    @total_mem_mb.setter
    def total_mem_mb(self, total_mem_mb):
        self._total_mem_mb = total_mem_mb

    @property
    def reserved_mem_mb(self):
        return self._reserved_mem_mb
    
    @reserved_mem_mb.setter
    def reserved_mem_mb(self, reserved_mem_mb):
        self._reserved_mem_mb = reserved_mem_mb

    @property
    def demanded_mem_mb(self):
        return self._demanded_mem_mb
    
    @demanded_mem_mb.setter
    def demanded_mem_mb(self, demanded_mem_mb):
        self._demanded_mem_mb = demanded_mem_mb

    @property
    def total_cpu_mhz(self):
        return self._total_cpu_mhz
    
    @total_cpu_mhz.setter
    def total_cpu_mhz(self, total_cpu_mhz):
        self._total_cpu_mhz = total_cpu_mhz

    @property
    def reserved_cpu_mhz(self):
        return self._reserved_cpu_mhz
    
    @reserved_cpu_mhz.setter
    def reserved_cpu_mhz(self, reserved_cpu_mhz):
        self._reserved_cpu_mhz = reserved_cpu_mhz

    @property
    def demanded_cpu_mhz(self):
        return self._demanded_cpu_mhz
    
    @demanded_cpu_mhz.setter
    def demanded_cpu_mhz(self, demanded_cpu_mhz):
        self._demanded_cpu_mhz = demanded_cpu_mhz

    @property
    def disk_size_bytes(self):
        return self._disk_size_bytes
    
    @disk_size_bytes.setter
    def disk_size_bytes(self, disk_size_bytes):
        self._disk_size_bytes = disk_size_bytes

    @property
    def disk_free_bytes(self):
        return self._disk_free_bytes
    
    @disk_free_bytes.setter
    def disk_free_bytes(self, disk_free_bytes):
        self._disk_free_bytes = disk_free_bytes

    @property
    def disk_uncommitted_bytes(self):
        return self._disk_uncommitted_bytes
    
    @disk_uncommitted_bytes.setter
    def disk_uncommitted_bytes(self, disk_uncommitted_bytes):
        self._disk_uncommitted_bytes = disk_uncommitted_bytes

    @property
    def disk_size_mb(self):
        return self._disk_size_mb
    
    @disk_size_mb.setter
    def disk_size_mb(self, disk_size_mb):
        self._disk_size_mb = disk_size_mb

    @property
    def disk_free_mb(self):
        return self._disk_free_mb
    
    @disk_free_mb.setter
    def disk_free_mb(self, disk_free_mb):
        self._disk_free_mb = disk_free_mb

    @property
    def disk_uncommitted_mb(self):
        return self._disk_uncommitted_mb
    
    @disk_uncommitted_mb.setter
    def disk_uncommitted_mb(self, disk_uncommitted_mb):
        self._disk_uncommitted_mb = disk_uncommitted_mb

    @property
    def vsm_version(self):
        return self._vsm_version
    
    @vsm_version.setter
    def vsm_version(self, vsm_version):
        self._vsm_version = vsm_version

    @property
    def has_proxy(self):
        return self._has_proxy
    
    @has_proxy.setter
    def has_proxy(self, has_proxy):
        self._has_proxy = has_proxy


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultVirtualCenterRecordType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
