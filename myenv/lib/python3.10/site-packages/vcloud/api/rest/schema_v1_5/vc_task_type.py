"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re


class VcTaskType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'moref': 'str',
        'status': 'str',
        'description': 'str',
        'error_message': 'str',
        'object_name': 'str',
        'object_type': 'str',
        'object_moref': 'str',
        'virtual_center_id': 'str',
        'start_time': 'str',
        'end_time': 'str'
    }

    attribute_map = {
        'name': 'name',
        'moref': 'moref',
        'status': 'status',
        'description': 'description',
        'error_message': 'errorMessage',
        'object_name': 'objectName',
        'object_type': 'objectType',
        'object_moref': 'objectMoref',
        'virtual_center_id': 'virtualCenterID',
        'start_time': 'startTime',
        'end_time': 'endTime'
    }

    def __init__(self, name=None,moref=None,status=None,description=None,error_message=None,object_name=None,object_type=None,object_moref=None,virtual_center_id=None,start_time=None,end_time=None):
        self._name = None
        self._moref = None
        self._status = None
        self._description = None
        self._error_message = None
        self._object_name = None
        self._object_type = None
        self._object_moref = None
        self._virtual_center_id = None
        self._start_time = None
        self._end_time = None

        if name is not None:
            self.name = name
        if moref is not None:
            self.moref = moref
        if status is not None:
            self.status = status
        if description is not None:
            self.description = description
        if error_message is not None:
            self.error_message = error_message
        if object_name is not None:
            self.object_name = object_name
        if object_type is not None:
            self.object_type = object_type
        if object_moref is not None:
            self.object_moref = object_moref
        if virtual_center_id is not None:
            self.virtual_center_id = virtual_center_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, name):
        self._name = name

    @property
    def moref(self):
        return self._moref
    
    @moref.setter
    def moref(self, moref):
        self._moref = moref

    @property
    def status(self):
        return self._status
    
    @status.setter
    def status(self, status):
        self._status = status

    @property
    def description(self):
        return self._description
    
    @description.setter
    def description(self, description):
        self._description = description

    @property
    def error_message(self):
        return self._error_message
    
    @error_message.setter
    def error_message(self, error_message):
        self._error_message = error_message

    @property
    def object_name(self):
        return self._object_name
    
    @object_name.setter
    def object_name(self, object_name):
        self._object_name = object_name

    @property
    def object_type(self):
        return self._object_type
    
    @object_type.setter
    def object_type(self, object_type):
        self._object_type = object_type

    @property
    def object_moref(self):
        return self._object_moref
    
    @object_moref.setter
    def object_moref(self, object_moref):
        self._object_moref = object_moref

    @property
    def virtual_center_id(self):
        return self._virtual_center_id
    
    @virtual_center_id.setter
    def virtual_center_id(self, virtual_center_id):
        self._virtual_center_id = virtual_center_id

    @property
    def start_time(self):
        return self._start_time
    
    @start_time.setter
    def start_time(self, start_time):
        self._start_time = start_time

    @property
    def end_time(self):
        return self._end_time
    
    @end_time.setter
    def end_time(self, end_time):
        self._end_time = end_time


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VcTaskType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
