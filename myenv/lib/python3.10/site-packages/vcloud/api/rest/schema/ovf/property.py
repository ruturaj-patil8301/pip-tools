"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re


class Property(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'MsgType',
        'description': 'MsgType',
        'value_element': 'list[PropertyConfigurationValueType]',
        'key': 'str',
        'type': 'str',
        'qualifiers': 'str',
        'user_configurable': 'bool',
        'value_attrib': 'str',
        'password': 'bool',
        'other_attributes': 'object'
    }

    attribute_map = {
        'label': 'label',
        'description': 'description',
        'value_element': 'valueElement',
        'key': 'key',
        'type': 'type',
        'qualifiers': 'qualifiers',
        'user_configurable': 'userConfigurable',
        'value_attrib': 'valueAttrib',
        'password': 'password',
        'other_attributes': 'otherAttributes'
    }

    def __init__(self, label=None,description=None,value_element=None,key=None,type=None,qualifiers=None,user_configurable=None,value_attrib=None,password=None,other_attributes=None):
        self._label = None
        self._description = None
        self._value_element = None
        self._key = None
        self._type = None
        self._qualifiers = None
        self._user_configurable = None
        self._value_attrib = None
        self._password = None
        self._other_attributes = None

        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        if value_element is not None:
            self.value_element = value_element
        if key is not None:
            self.key = key
        if type is not None:
            self.type = type
        if qualifiers is not None:
            self.qualifiers = qualifiers
        if user_configurable is not None:
            self.user_configurable = user_configurable
        if value_attrib is not None:
            self.value_attrib = value_attrib
        if password is not None:
            self.password = password
        if other_attributes is not None:
            self.other_attributes = other_attributes

    @property
    def label(self):
        return self._label
    
    @label.setter
    def label(self, label):
        self._label = label

    @property
    def description(self):
        return self._description
    
    @description.setter
    def description(self, description):
        self._description = description

    @property
    def value_element(self):
        return self._value_element
    
    @value_element.setter
    def value_element(self, value_element):
        self._value_element = value_element

    @property
    def key(self):
        return self._key
    
    @key.setter
    def key(self, key):
        self._key = key

    @property
    def type(self):
        return self._type
    
    @type.setter
    def type(self, type):
        self._type = type

    @property
    def qualifiers(self):
        return self._qualifiers
    
    @qualifiers.setter
    def qualifiers(self, qualifiers):
        self._qualifiers = qualifiers

    @property
    def user_configurable(self):
        return self._user_configurable
    
    @user_configurable.setter
    def user_configurable(self, user_configurable):
        self._user_configurable = user_configurable

    @property
    def value_attrib(self):
        return self._value_attrib
    
    @value_attrib.setter
    def value_attrib(self, value_attrib):
        self._value_attrib = value_attrib

    @property
    def password(self):
        return self._password
    
    @password.setter
    def password(self, password):
        self._password = password

    @property
    def other_attributes(self):
        return self._other_attributes
    
    @other_attributes.setter
    def other_attributes(self, other_attributes):
        self._other_attributes = other_attributes


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Property):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
