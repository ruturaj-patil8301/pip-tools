"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re


class Level(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'vendor': 'str',
        'eax': 'str',
        'ebx': 'str',
        'ecx': 'str',
        'edx': 'str',
        'other_attributes': 'object'
    }

    attribute_map = {
        'level': 'level',
        'vendor': 'vendor',
        'eax': 'eax',
        'ebx': 'ebx',
        'ecx': 'ecx',
        'edx': 'edx',
        'other_attributes': 'otherAttributes'
    }

    def __init__(self, level=None,vendor=None,eax=None,ebx=None,ecx=None,edx=None,other_attributes=None):
        self._level = None
        self._vendor = None
        self._eax = None
        self._ebx = None
        self._ecx = None
        self._edx = None
        self._other_attributes = None

        if level is not None:
            self.level = level
        if vendor is not None:
            self.vendor = vendor
        if eax is not None:
            self.eax = eax
        if ebx is not None:
            self.ebx = ebx
        if ecx is not None:
            self.ecx = ecx
        if edx is not None:
            self.edx = edx
        if other_attributes is not None:
            self.other_attributes = other_attributes

    @property
    def level(self):
        return self._level
    
    @level.setter
    def level(self, level):
        self._level = level

    @property
    def vendor(self):
        return self._vendor
    
    @vendor.setter
    def vendor(self, vendor):
        self._vendor = vendor

    @property
    def eax(self):
        return self._eax
    
    @eax.setter
    def eax(self, eax):
        self._eax = eax

    @property
    def ebx(self):
        return self._ebx
    
    @ebx.setter
    def ebx(self, ebx):
        self._ebx = ebx

    @property
    def ecx(self):
        return self._ecx
    
    @ecx.setter
    def ecx(self, ecx):
        self._ecx = ecx

    @property
    def edx(self):
        return self._edx
    
    @edx.setter
    def edx(self, edx):
        self._edx = edx

    @property
    def other_attributes(self):
        return self._other_attributes
    
    @other_attributes.setter
    def other_attributes(self, other_attributes):
        self._other_attributes = other_attributes


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Level):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
