"""
 Copyright (c) 2021 VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re


class Icon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'int',
        'width': 'int',
        'mime_type': 'str',
        'file_ref': 'str',
        'other_attributes': 'object'
    }

    attribute_map = {
        'height': 'height',
        'width': 'width',
        'mime_type': 'mimeType',
        'file_ref': 'fileRef',
        'other_attributes': 'otherAttributes'
    }

    def __init__(self, height=None,width=None,mime_type=None,file_ref=None,other_attributes=None):
        self._height = None
        self._width = None
        self._mime_type = None
        self._file_ref = None
        self._other_attributes = None

        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if mime_type is not None:
            self.mime_type = mime_type
        if file_ref is not None:
            self.file_ref = file_ref
        if other_attributes is not None:
            self.other_attributes = other_attributes

    @property
    def height(self):
        return self._height
    
    @height.setter
    def height(self, height):
        self._height = height

    @property
    def width(self):
        return self._width
    
    @width.setter
    def width(self, width):
        self._width = width

    @property
    def mime_type(self):
        return self._mime_type
    
    @mime_type.setter
    def mime_type(self, mime_type):
        self._mime_type = mime_type

    @property
    def file_ref(self):
        return self._file_ref
    
    @file_ref.setter
    def file_ref(self, file_ref):
        self._file_ref = file_ref

    @property
    def other_attributes(self):
        return self._other_attributes
    
    @other_attributes.setter
    def other_attributes(self, other_attributes):
        self._other_attributes = other_attributes


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Icon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
