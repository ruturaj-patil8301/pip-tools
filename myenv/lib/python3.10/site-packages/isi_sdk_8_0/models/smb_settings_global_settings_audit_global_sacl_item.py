# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 3
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmbSettingsGlobalSettingsAuditGlobalSaclItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flags': 'str',
        'permission': 'list[str]'
    }

    attribute_map = {
        'flags': 'flags',
        'permission': 'permission'
    }

    def __init__(self, flags=None, permission=None):  # noqa: E501
        """SmbSettingsGlobalSettingsAuditGlobalSaclItem - a model defined in Swagger"""  # noqa: E501

        self._flags = None
        self._permission = None
        self.discriminator = None

        self.flags = flags
        self.permission = permission

    @property
    def flags(self):
        """Gets the flags of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.  # noqa: E501

        Determines if audit is performed on success or failure.  # noqa: E501

        :return: The flags of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.  # noqa: E501
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.

        Determines if audit is performed on success or failure.  # noqa: E501

        :param flags: The flags of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.  # noqa: E501
        :type: str
        """
        if flags is None:
            raise ValueError("Invalid value for `flags`, must not be `None`")  # noqa: E501
        allowed_values = ["successful", "failed"]  # noqa: E501
        if flags not in allowed_values:
            raise ValueError(
                "Invalid value for `flags` ({0}), must be one of {1}"  # noqa: E501
                .format(flags, allowed_values)
            )

        self._flags = flags

    @property
    def permission(self):
        """Gets the permission of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.  # noqa: E501

        Specifies the array of filesystem rights that are governed.  # noqa: E501

        :return: The permission of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.

        Specifies the array of filesystem rights that are governed.  # noqa: E501

        :param permission: The permission of this SmbSettingsGlobalSettingsAuditGlobalSaclItem.  # noqa: E501
        :type: list[str]
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")  # noqa: E501
        allowed_values = ["generic_all", "generic_read", "generic_write", "generic_exec", "std_delete", "std_read_dac", "std_write_dac", "std_write_owner", "std_synchronize", "std_required", "list", "add_file", "add_subdir", "delete_child", "traverse", "dir_read_attr", "dir_write_attr", "dir_read_ext_attr", "dir_write_ext_attr", "dir_gen_read", "dir_gen_write", "dir_gen_execute", "dir_gen_all", "file_read", "file_write", "append", "execute", "file_read_attr", "file_write_attr", "file_read_ext_attr", "file_write_ext_attr", "file_gen_read", "file_gen_write", "file_gen_execute", "file_gen_all", "modify", "object_inherit", "container_inherit", "no_prop_inherit", "inherit_only", "inherited_ace"]  # noqa: E501
        if not set(permission).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permission` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permission) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permission = permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmbSettingsGlobalSettingsAuditGlobalSaclItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
