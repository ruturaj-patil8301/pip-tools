# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 3
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoragepoolTierUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avail_bytes': 'str',
        'avail_ssd_bytes': 'str',
        'balanced': 'bool',
        'free_bytes': 'str',
        'free_ssd_bytes': 'str',
        'total_bytes': 'str',
        'total_ssd_bytes': 'str',
        'virtual_hot_spare_bytes': 'str'
    }

    attribute_map = {
        'avail_bytes': 'avail_bytes',
        'avail_ssd_bytes': 'avail_ssd_bytes',
        'balanced': 'balanced',
        'free_bytes': 'free_bytes',
        'free_ssd_bytes': 'free_ssd_bytes',
        'total_bytes': 'total_bytes',
        'total_ssd_bytes': 'total_ssd_bytes',
        'virtual_hot_spare_bytes': 'virtual_hot_spare_bytes'
    }

    def __init__(self, avail_bytes=None, avail_ssd_bytes=None, balanced=None, free_bytes=None, free_ssd_bytes=None, total_bytes=None, total_ssd_bytes=None, virtual_hot_spare_bytes=None):  # noqa: E501
        """StoragepoolTierUsage - a model defined in Swagger"""  # noqa: E501

        self._avail_bytes = None
        self._avail_ssd_bytes = None
        self._balanced = None
        self._free_bytes = None
        self._free_ssd_bytes = None
        self._total_bytes = None
        self._total_ssd_bytes = None
        self._virtual_hot_spare_bytes = None
        self.discriminator = None

        self.avail_bytes = avail_bytes
        self.avail_ssd_bytes = avail_ssd_bytes
        self.balanced = balanced
        self.free_bytes = free_bytes
        self.free_ssd_bytes = free_ssd_bytes
        self.total_bytes = total_bytes
        self.total_ssd_bytes = total_ssd_bytes
        self.virtual_hot_spare_bytes = virtual_hot_spare_bytes

    @property
    def avail_bytes(self):
        """Gets the avail_bytes of this StoragepoolTierUsage.  # noqa: E501

        Available free bytes remaining in the pool when virtual hot spare is taken into account.  # noqa: E501

        :return: The avail_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._avail_bytes

    @avail_bytes.setter
    def avail_bytes(self, avail_bytes):
        """Sets the avail_bytes of this StoragepoolTierUsage.

        Available free bytes remaining in the pool when virtual hot spare is taken into account.  # noqa: E501

        :param avail_bytes: The avail_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if avail_bytes is None:
            raise ValueError("Invalid value for `avail_bytes`, must not be `None`")  # noqa: E501

        self._avail_bytes = avail_bytes

    @property
    def avail_ssd_bytes(self):
        """Gets the avail_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501

        Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.  # noqa: E501

        :return: The avail_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._avail_ssd_bytes

    @avail_ssd_bytes.setter
    def avail_ssd_bytes(self, avail_ssd_bytes):
        """Sets the avail_ssd_bytes of this StoragepoolTierUsage.

        Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.  # noqa: E501

        :param avail_ssd_bytes: The avail_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if avail_ssd_bytes is None:
            raise ValueError("Invalid value for `avail_ssd_bytes`, must not be `None`")  # noqa: E501

        self._avail_ssd_bytes = avail_ssd_bytes

    @property
    def balanced(self):
        """Gets the balanced of this StoragepoolTierUsage.  # noqa: E501

        Whether or not the pool usage is currently balanced.  # noqa: E501

        :return: The balanced of this StoragepoolTierUsage.  # noqa: E501
        :rtype: bool
        """
        return self._balanced

    @balanced.setter
    def balanced(self, balanced):
        """Sets the balanced of this StoragepoolTierUsage.

        Whether or not the pool usage is currently balanced.  # noqa: E501

        :param balanced: The balanced of this StoragepoolTierUsage.  # noqa: E501
        :type: bool
        """
        if balanced is None:
            raise ValueError("Invalid value for `balanced`, must not be `None`")  # noqa: E501

        self._balanced = balanced

    @property
    def free_bytes(self):
        """Gets the free_bytes of this StoragepoolTierUsage.  # noqa: E501

        Free bytes remaining in the pool.  # noqa: E501

        :return: The free_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._free_bytes

    @free_bytes.setter
    def free_bytes(self, free_bytes):
        """Sets the free_bytes of this StoragepoolTierUsage.

        Free bytes remaining in the pool.  # noqa: E501

        :param free_bytes: The free_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if free_bytes is None:
            raise ValueError("Invalid value for `free_bytes`, must not be `None`")  # noqa: E501

        self._free_bytes = free_bytes

    @property
    def free_ssd_bytes(self):
        """Gets the free_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501

        Free bytes remaining in the pool on SSD drives.  # noqa: E501

        :return: The free_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._free_ssd_bytes

    @free_ssd_bytes.setter
    def free_ssd_bytes(self, free_ssd_bytes):
        """Sets the free_ssd_bytes of this StoragepoolTierUsage.

        Free bytes remaining in the pool on SSD drives.  # noqa: E501

        :param free_ssd_bytes: The free_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if free_ssd_bytes is None:
            raise ValueError("Invalid value for `free_ssd_bytes`, must not be `None`")  # noqa: E501

        self._free_ssd_bytes = free_ssd_bytes

    @property
    def total_bytes(self):
        """Gets the total_bytes of this StoragepoolTierUsage.  # noqa: E501

        Total bytes used in the pool.  # noqa: E501

        :return: The total_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this StoragepoolTierUsage.

        Total bytes used in the pool.  # noqa: E501

        :param total_bytes: The total_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if total_bytes is None:
            raise ValueError("Invalid value for `total_bytes`, must not be `None`")  # noqa: E501

        self._total_bytes = total_bytes

    @property
    def total_ssd_bytes(self):
        """Gets the total_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501

        Total bytes used in the pool on SSD drives.  # noqa: E501

        :return: The total_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._total_ssd_bytes

    @total_ssd_bytes.setter
    def total_ssd_bytes(self, total_ssd_bytes):
        """Sets the total_ssd_bytes of this StoragepoolTierUsage.

        Total bytes used in the pool on SSD drives.  # noqa: E501

        :param total_ssd_bytes: The total_ssd_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if total_ssd_bytes is None:
            raise ValueError("Invalid value for `total_ssd_bytes`, must not be `None`")  # noqa: E501

        self._total_ssd_bytes = total_ssd_bytes

    @property
    def virtual_hot_spare_bytes(self):
        """Gets the virtual_hot_spare_bytes of this StoragepoolTierUsage.  # noqa: E501

        Bytes reserved for virtual hot spare in the pool.  # noqa: E501

        :return: The virtual_hot_spare_bytes of this StoragepoolTierUsage.  # noqa: E501
        :rtype: str
        """
        return self._virtual_hot_spare_bytes

    @virtual_hot_spare_bytes.setter
    def virtual_hot_spare_bytes(self, virtual_hot_spare_bytes):
        """Sets the virtual_hot_spare_bytes of this StoragepoolTierUsage.

        Bytes reserved for virtual hot spare in the pool.  # noqa: E501

        :param virtual_hot_spare_bytes: The virtual_hot_spare_bytes of this StoragepoolTierUsage.  # noqa: E501
        :type: str
        """
        if virtual_hot_spare_bytes is None:
            raise ValueError("Invalid value for `virtual_hot_spare_bytes`, must not be `None`")  # noqa: E501

        self._virtual_hot_spare_bytes = virtual_hot_spare_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoragepoolTierUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
