# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 3
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthAccessAccessItemFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group': 'str',
        'mode': 'str',
        'owner': 'str',
        'relevant_mode': 'str'
    }

    attribute_map = {
        'group': 'group',
        'mode': 'mode',
        'owner': 'owner',
        'relevant_mode': 'relevant_mode'
    }

    def __init__(self, group=None, mode=None, owner=None, relevant_mode=None):  # noqa: E501
        """AuthAccessAccessItemFile - a model defined in Swagger"""  # noqa: E501

        self._group = None
        self._mode = None
        self._owner = None
        self._relevant_mode = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if mode is not None:
            self.mode = mode
        if owner is not None:
            self.owner = owner
        if relevant_mode is not None:
            self.relevant_mode = relevant_mode

    @property
    def group(self):
        """Gets the group of this AuthAccessAccessItemFile.  # noqa: E501

        Specifies the group name or ID for the file.  # noqa: E501

        :return: The group of this AuthAccessAccessItemFile.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AuthAccessAccessItemFile.

        Specifies the group name or ID for the file.  # noqa: E501

        :param group: The group of this AuthAccessAccessItemFile.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def mode(self):
        """Gets the mode of this AuthAccessAccessItemFile.  # noqa: E501

        Specifies the mode bits on the file.  # noqa: E501

        :return: The mode of this AuthAccessAccessItemFile.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AuthAccessAccessItemFile.

        Specifies the mode bits on the file.  # noqa: E501

        :param mode: The mode of this AuthAccessAccessItemFile.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def owner(self):
        """Gets the owner of this AuthAccessAccessItemFile.  # noqa: E501

        Specifies the name or ID of the file owner.  # noqa: E501

        :return: The owner of this AuthAccessAccessItemFile.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AuthAccessAccessItemFile.

        Specifies the name or ID of the file owner.  # noqa: E501

        :param owner: The owner of this AuthAccessAccessItemFile.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def relevant_mode(self):
        """Gets the relevant_mode of this AuthAccessAccessItemFile.  # noqa: E501

        Specifies the mode bits that are related to the user.  # noqa: E501

        :return: The relevant_mode of this AuthAccessAccessItemFile.  # noqa: E501
        :rtype: str
        """
        return self._relevant_mode

    @relevant_mode.setter
    def relevant_mode(self, relevant_mode):
        """Sets the relevant_mode of this AuthAccessAccessItemFile.

        Specifies the mode bits that are related to the user.  # noqa: E501

        :param relevant_mode: The relevant_mode of this AuthAccessAccessItemFile.  # noqa: E501
        :type: str
        """

        self._relevant_mode = relevant_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthAccessAccessItemFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
