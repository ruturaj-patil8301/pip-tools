# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 3
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HardwareFcportsExtendedFcports(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'port': 'str',
        'rate': 'str',
        'state': 'str',
        'topology': 'str',
        'wwnn': 'str',
        'wwpn': 'str'
    }

    attribute_map = {
        'id': 'id',
        'port': 'port',
        'rate': 'rate',
        'state': 'state',
        'topology': 'topology',
        'wwnn': 'wwnn',
        'wwpn': 'wwpn'
    }

    def __init__(self, id=None, port=None, rate=None, state=None, topology=None, wwnn=None, wwpn=None):  # noqa: E501
        """HardwareFcportsExtendedFcports - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._port = None
        self._rate = None
        self._state = None
        self._topology = None
        self._wwnn = None
        self._wwpn = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if port is not None:
            self.port = port
        if rate is not None:
            self.rate = rate
        if state is not None:
            self.state = state
        if topology is not None:
            self.topology = topology
        if wwnn is not None:
            self.wwnn = wwnn
        if wwpn is not None:
            self.wwpn = wwpn

    @property
    def id(self):
        """Gets the id of this HardwareFcportsExtendedFcports.  # noqa: E501

        Unique display id.  # noqa: E501

        :return: The id of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HardwareFcportsExtendedFcports.

        Unique display id.  # noqa: E501

        :param id: The id of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def port(self):
        """Gets the port of this HardwareFcportsExtendedFcports.  # noqa: E501

        Port ID  # noqa: E501

        :return: The port of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HardwareFcportsExtendedFcports.

        Port ID  # noqa: E501

        :param port: The port of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def rate(self):
        """Gets the rate of this HardwareFcportsExtendedFcports.  # noqa: E501


        :return: The rate of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this HardwareFcportsExtendedFcports.


        :param rate: The rate of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "1", "2", "4", "8"]  # noqa: E501
        if rate not in allowed_values:
            raise ValueError(
                "Invalid value for `rate` ({0}), must be one of {1}"  # noqa: E501
                .format(rate, allowed_values)
            )

        self._rate = rate

    @property
    def state(self):
        """Gets the state of this HardwareFcportsExtendedFcports.  # noqa: E501

        State of the port  # noqa: E501

        :return: The state of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HardwareFcportsExtendedFcports.

        State of the port  # noqa: E501

        :param state: The state of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """
        allowed_values = ["enable", "disable"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def topology(self):
        """Gets the topology of this HardwareFcportsExtendedFcports.  # noqa: E501


        :return: The topology of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this HardwareFcportsExtendedFcports.


        :param topology: The topology of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "ptp", "loop"]  # noqa: E501
        if topology not in allowed_values:
            raise ValueError(
                "Invalid value for `topology` ({0}), must be one of {1}"  # noqa: E501
                .format(topology, allowed_values)
            )

        self._topology = topology

    @property
    def wwnn(self):
        """Gets the wwnn of this HardwareFcportsExtendedFcports.  # noqa: E501

        World wide node name of the port  # noqa: E501

        :return: The wwnn of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """Sets the wwnn of this HardwareFcportsExtendedFcports.

        World wide node name of the port  # noqa: E501

        :param wwnn: The wwnn of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """

        self._wwnn = wwnn

    @property
    def wwpn(self):
        """Gets the wwpn of this HardwareFcportsExtendedFcports.  # noqa: E501

        World wide port name of the port  # noqa: E501

        :return: The wwpn of this HardwareFcportsExtendedFcports.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this HardwareFcportsExtendedFcports.

        World wide port name of the port  # noqa: E501

        :param wwpn: The wwpn of this HardwareFcportsExtendedFcports.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareFcportsExtendedFcports):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
