# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 3
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from isi_sdk_8_0.api_client import ApiClient


class StoragepoolApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_compatibilities_class_active_item(self, compatibilities_class_active_item, **kwargs):  # noqa: E501
        """create_compatibilities_class_active_item  # noqa: E501

        Create a new compatibility  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_compatibilities_class_active_item(compatibilities_class_active_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param CompatibilitiesClassActiveItem compatibilities_class_active_item: (required)
        :return: CreateCompatibilitiesClassActiveItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_compatibilities_class_active_item_with_http_info(compatibilities_class_active_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_compatibilities_class_active_item_with_http_info(compatibilities_class_active_item, **kwargs)  # noqa: E501
            return data

    def create_compatibilities_class_active_item_with_http_info(self, compatibilities_class_active_item, **kwargs):  # noqa: E501
        """create_compatibilities_class_active_item  # noqa: E501

        Create a new compatibility  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_compatibilities_class_active_item_with_http_info(compatibilities_class_active_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param CompatibilitiesClassActiveItem compatibilities_class_active_item: (required)
        :return: CreateCompatibilitiesClassActiveItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_class_active_item']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_compatibilities_class_active_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_class_active_item' is set
        if ('compatibilities_class_active_item' not in params or
                params['compatibilities_class_active_item'] is None):
            raise ValueError("Missing the required parameter `compatibilities_class_active_item` when calling `create_compatibilities_class_active_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compatibilities_class_active_item' in params:
            body_params = params['compatibilities_class_active_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/compatibilities/class/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCompatibilitiesClassActiveItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_compatibilities_ssd_active_item(self, compatibilities_ssd_active_item, **kwargs):  # noqa: E501
        """create_compatibilities_ssd_active_item  # noqa: E501

        Create a new ssd compatibility  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_compatibilities_ssd_active_item(compatibilities_ssd_active_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param CompatibilitiesSsdActiveItem compatibilities_ssd_active_item: (required)
        :return: CreateCompatibilitiesClassActiveItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_compatibilities_ssd_active_item_with_http_info(compatibilities_ssd_active_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_compatibilities_ssd_active_item_with_http_info(compatibilities_ssd_active_item, **kwargs)  # noqa: E501
            return data

    def create_compatibilities_ssd_active_item_with_http_info(self, compatibilities_ssd_active_item, **kwargs):  # noqa: E501
        """create_compatibilities_ssd_active_item  # noqa: E501

        Create a new ssd compatibility  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_compatibilities_ssd_active_item_with_http_info(compatibilities_ssd_active_item, async=True)
        >>> result = thread.get()

        :param async bool
        :param CompatibilitiesSsdActiveItem compatibilities_ssd_active_item: (required)
        :return: CreateCompatibilitiesClassActiveItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_ssd_active_item']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_compatibilities_ssd_active_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_ssd_active_item' is set
        if ('compatibilities_ssd_active_item' not in params or
                params['compatibilities_ssd_active_item'] is None):
            raise ValueError("Missing the required parameter `compatibilities_ssd_active_item` when calling `create_compatibilities_ssd_active_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compatibilities_ssd_active_item' in params:
            body_params = params['compatibilities_ssd_active_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/compatibilities/ssd/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCompatibilitiesClassActiveItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_storagepool_nodepool(self, storagepool_nodepool, **kwargs):  # noqa: E501
        """create_storagepool_nodepool  # noqa: E501

        Create a new node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_storagepool_nodepool(storagepool_nodepool, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolNodepoolCreateParams storagepool_nodepool: (required)
        :return: CreateStoragepoolTierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_storagepool_nodepool_with_http_info(storagepool_nodepool, **kwargs)  # noqa: E501
        else:
            (data) = self.create_storagepool_nodepool_with_http_info(storagepool_nodepool, **kwargs)  # noqa: E501
            return data

    def create_storagepool_nodepool_with_http_info(self, storagepool_nodepool, **kwargs):  # noqa: E501
        """create_storagepool_nodepool  # noqa: E501

        Create a new node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_storagepool_nodepool_with_http_info(storagepool_nodepool, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolNodepoolCreateParams storagepool_nodepool: (required)
        :return: CreateStoragepoolTierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_nodepool']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_storagepool_nodepool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_nodepool' is set
        if ('storagepool_nodepool' not in params or
                params['storagepool_nodepool'] is None):
            raise ValueError("Missing the required parameter `storagepool_nodepool` when calling `create_storagepool_nodepool`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storagepool_nodepool' in params:
            body_params = params['storagepool_nodepool']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/nodepools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateStoragepoolTierResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_storagepool_tier(self, storagepool_tier, **kwargs):  # noqa: E501
        """create_storagepool_tier  # noqa: E501

        Create a new tier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_storagepool_tier(storagepool_tier, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolTierCreateParams storagepool_tier: (required)
        :return: CreateStoragepoolTierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_storagepool_tier_with_http_info(storagepool_tier, **kwargs)  # noqa: E501
        else:
            (data) = self.create_storagepool_tier_with_http_info(storagepool_tier, **kwargs)  # noqa: E501
            return data

    def create_storagepool_tier_with_http_info(self, storagepool_tier, **kwargs):  # noqa: E501
        """create_storagepool_tier  # noqa: E501

        Create a new tier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_storagepool_tier_with_http_info(storagepool_tier, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolTierCreateParams storagepool_tier: (required)
        :return: CreateStoragepoolTierResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_tier']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_storagepool_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_tier' is set
        if ('storagepool_tier' not in params or
                params['storagepool_tier'] is None):
            raise ValueError("Missing the required parameter `storagepool_tier` when calling `create_storagepool_tier`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storagepool_tier' in params:
            body_params = params['storagepool_tier']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/tiers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateStoragepoolTierResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_compatibilities_class_active_by_id(self, compatibilities_class_active_id, **kwargs):  # noqa: E501
        """delete_compatibilities_class_active_by_id  # noqa: E501

        Delete an active compatibility by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compatibilities_class_active_by_id(compatibilities_class_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_class_active_id: Delete an active compatibility by id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_compatibilities_class_active_by_id_with_http_info(compatibilities_class_active_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_compatibilities_class_active_by_id_with_http_info(compatibilities_class_active_id, **kwargs)  # noqa: E501
            return data

    def delete_compatibilities_class_active_by_id_with_http_info(self, compatibilities_class_active_id, **kwargs):  # noqa: E501
        """delete_compatibilities_class_active_by_id  # noqa: E501

        Delete an active compatibility by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compatibilities_class_active_by_id_with_http_info(compatibilities_class_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_class_active_id: Delete an active compatibility by id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_class_active_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compatibilities_class_active_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_class_active_id' is set
        if ('compatibilities_class_active_id' not in params or
                params['compatibilities_class_active_id'] is None):
            raise ValueError("Missing the required parameter `compatibilities_class_active_id` when calling `delete_compatibilities_class_active_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compatibilities_class_active_id' in params:
            path_params['CompatibilitiesClassActiveId'] = params['compatibilities_class_active_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_compatibilities_ssd_active_by_id(self, compatibilities_ssd_active_id, **kwargs):  # noqa: E501
        """delete_compatibilities_ssd_active_by_id  # noqa: E501

        Delete an active ssd compatibility by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compatibilities_ssd_active_by_id(compatibilities_ssd_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_ssd_active_id: Delete an active ssd compatibility by id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id, **kwargs)  # noqa: E501
            return data

    def delete_compatibilities_ssd_active_by_id_with_http_info(self, compatibilities_ssd_active_id, **kwargs):  # noqa: E501
        """delete_compatibilities_ssd_active_by_id  # noqa: E501

        Delete an active ssd compatibility by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_ssd_active_id: Delete an active ssd compatibility by id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_ssd_active_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compatibilities_ssd_active_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_ssd_active_id' is set
        if ('compatibilities_ssd_active_id' not in params or
                params['compatibilities_ssd_active_id'] is None):
            raise ValueError("Missing the required parameter `compatibilities_ssd_active_id` when calling `delete_compatibilities_ssd_active_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compatibilities_ssd_active_id' in params:
            path_params['CompatibilitiesSsdActiveId'] = params['compatibilities_ssd_active_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storagepool_nodepool(self, storagepool_nodepool_id, **kwargs):  # noqa: E501
        """delete_storagepool_nodepool  # noqa: E501

        Delete node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storagepool_nodepool(storagepool_nodepool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_nodepool_id: Delete node pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_storagepool_nodepool_with_http_info(storagepool_nodepool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storagepool_nodepool_with_http_info(storagepool_nodepool_id, **kwargs)  # noqa: E501
            return data

    def delete_storagepool_nodepool_with_http_info(self, storagepool_nodepool_id, **kwargs):  # noqa: E501
        """delete_storagepool_nodepool  # noqa: E501

        Delete node pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storagepool_nodepool_with_http_info(storagepool_nodepool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_nodepool_id: Delete node pool. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_nodepool_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storagepool_nodepool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_nodepool_id' is set
        if ('storagepool_nodepool_id' not in params or
                params['storagepool_nodepool_id'] is None):
            raise ValueError("Missing the required parameter `storagepool_nodepool_id` when calling `delete_storagepool_nodepool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_nodepool_id' in params:
            path_params['StoragepoolNodepoolId'] = params['storagepool_nodepool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storagepool_tier(self, storagepool_tier_id, **kwargs):  # noqa: E501
        """delete_storagepool_tier  # noqa: E501

        Delete tier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storagepool_tier(storagepool_tier_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_tier_id: Delete tier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_storagepool_tier_with_http_info(storagepool_tier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_storagepool_tier_with_http_info(storagepool_tier_id, **kwargs)  # noqa: E501
            return data

    def delete_storagepool_tier_with_http_info(self, storagepool_tier_id, **kwargs):  # noqa: E501
        """delete_storagepool_tier  # noqa: E501

        Delete tier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storagepool_tier_with_http_info(storagepool_tier_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_tier_id: Delete tier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_tier_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storagepool_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_tier_id' is set
        if ('storagepool_tier_id' not in params or
                params['storagepool_tier_id'] is None):
            raise ValueError("Missing the required parameter `storagepool_tier_id` when calling `delete_storagepool_tier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_tier_id' in params:
            path_params['StoragepoolTierId'] = params['storagepool_tier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/tiers/{StoragepoolTierId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_storagepool_tiers(self, **kwargs):  # noqa: E501
        """delete_storagepool_tiers  # noqa: E501

        Delete all tiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storagepool_tiers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_storagepool_tiers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_storagepool_tiers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_storagepool_tiers_with_http_info(self, **kwargs):  # noqa: E501
        """delete_storagepool_tiers  # noqa: E501

        Delete all tiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_storagepool_tiers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_storagepool_tiers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/tiers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compatibilities_class_active_by_id(self, compatibilities_class_active_id, **kwargs):  # noqa: E501
        """get_compatibilities_class_active_by_id  # noqa: E501

        Get an active compatibilities by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_class_active_by_id(compatibilities_class_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_class_active_id: Get an active compatibilities by id (required)
        :return: CompatibilitiesClassActive
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compatibilities_class_active_by_id_with_http_info(compatibilities_class_active_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compatibilities_class_active_by_id_with_http_info(compatibilities_class_active_id, **kwargs)  # noqa: E501
            return data

    def get_compatibilities_class_active_by_id_with_http_info(self, compatibilities_class_active_id, **kwargs):  # noqa: E501
        """get_compatibilities_class_active_by_id  # noqa: E501

        Get an active compatibilities by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_class_active_by_id_with_http_info(compatibilities_class_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_class_active_id: Get an active compatibilities by id (required)
        :return: CompatibilitiesClassActive
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_class_active_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compatibilities_class_active_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_class_active_id' is set
        if ('compatibilities_class_active_id' not in params or
                params['compatibilities_class_active_id'] is None):
            raise ValueError("Missing the required parameter `compatibilities_class_active_id` when calling `get_compatibilities_class_active_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compatibilities_class_active_id' in params:
            path_params['CompatibilitiesClassActiveId'] = params['compatibilities_class_active_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompatibilitiesClassActive',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compatibilities_class_available(self, **kwargs):  # noqa: E501
        """get_compatibilities_class_available  # noqa: E501

        Get a list of available compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_class_available(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesClassAvailable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compatibilities_class_available_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_compatibilities_class_available_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_compatibilities_class_available_with_http_info(self, **kwargs):  # noqa: E501
        """get_compatibilities_class_available  # noqa: E501

        Get a list of available compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_class_available_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesClassAvailable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compatibilities_class_available" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/compatibilities/class/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompatibilitiesClassAvailable',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compatibilities_ssd_active_by_id(self, compatibilities_ssd_active_id, **kwargs):  # noqa: E501
        """get_compatibilities_ssd_active_by_id  # noqa: E501

        Get a active ssd compatibilities by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_ssd_active_by_id(compatibilities_ssd_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_ssd_active_id: Get a active ssd compatibilities by id (required)
        :return: CompatibilitiesSsdActive
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id, **kwargs)  # noqa: E501
            return data

    def get_compatibilities_ssd_active_by_id_with_http_info(self, compatibilities_ssd_active_id, **kwargs):  # noqa: E501
        """get_compatibilities_ssd_active_by_id  # noqa: E501

        Get a active ssd compatibilities by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str compatibilities_ssd_active_id: Get a active ssd compatibilities by id (required)
        :return: CompatibilitiesSsdActive
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_ssd_active_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compatibilities_ssd_active_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_ssd_active_id' is set
        if ('compatibilities_ssd_active_id' not in params or
                params['compatibilities_ssd_active_id'] is None):
            raise ValueError("Missing the required parameter `compatibilities_ssd_active_id` when calling `get_compatibilities_ssd_active_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compatibilities_ssd_active_id' in params:
            path_params['CompatibilitiesSsdActiveId'] = params['compatibilities_ssd_active_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompatibilitiesSsdActive',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compatibilities_ssd_available(self, **kwargs):  # noqa: E501
        """get_compatibilities_ssd_available  # noqa: E501

        Get a list of available ssd compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_ssd_available(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesSsdAvailable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compatibilities_ssd_available_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_compatibilities_ssd_available_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_compatibilities_ssd_available_with_http_info(self, **kwargs):  # noqa: E501
        """get_compatibilities_ssd_available  # noqa: E501

        Get a list of available ssd compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compatibilities_ssd_available_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesSsdAvailable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compatibilities_ssd_available" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/compatibilities/ssd/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompatibilitiesSsdAvailable',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_nodepool(self, storagepool_nodepool_id, **kwargs):  # noqa: E501
        """get_storagepool_nodepool  # noqa: E501

        Retrieve node pool information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_nodepool(storagepool_nodepool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_nodepool_id: Retrieve node pool information. (required)
        :return: StoragepoolNodepools
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_nodepool_with_http_info(storagepool_nodepool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_nodepool_with_http_info(storagepool_nodepool_id, **kwargs)  # noqa: E501
            return data

    def get_storagepool_nodepool_with_http_info(self, storagepool_nodepool_id, **kwargs):  # noqa: E501
        """get_storagepool_nodepool  # noqa: E501

        Retrieve node pool information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_nodepool_with_http_info(storagepool_nodepool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_nodepool_id: Retrieve node pool information. (required)
        :return: StoragepoolNodepools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_nodepool_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_nodepool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_nodepool_id' is set
        if ('storagepool_nodepool_id' not in params or
                params['storagepool_nodepool_id'] is None):
            raise ValueError("Missing the required parameter `storagepool_nodepool_id` when calling `get_storagepool_nodepool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_nodepool_id' in params:
            path_params['StoragepoolNodepoolId'] = params['storagepool_nodepool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolNodepools',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_settings(self, **kwargs):  # noqa: E501
        """get_storagepool_settings  # noqa: E501

        List all settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_settings(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storagepool_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_storagepool_settings  # noqa: E501

        List all settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_settings_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolSettings',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_status(self, **kwargs):  # noqa: E501
        """get_storagepool_status  # noqa: E501

        List any health conditions detected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_status(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storagepool_status_with_http_info(self, **kwargs):  # noqa: E501
        """get_storagepool_status  # noqa: E501

        List any health conditions detected.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_status_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolStatus',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_storagepools(self, **kwargs):  # noqa: E501
        """get_storagepool_storagepools  # noqa: E501

        List all storage pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_storagepools(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolStoragepools
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_storagepools_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_storagepools_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storagepool_storagepools_with_http_info(self, **kwargs):  # noqa: E501
        """get_storagepool_storagepools  # noqa: E501

        List all storage pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_storagepools_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolStoragepools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_storagepools" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/storagepools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolStoragepools',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_suggested_protection_nid(self, storagepool_suggested_protection_nid, **kwargs):  # noqa: E501
        """get_storagepool_suggested_protection_nid  # noqa: E501

        Retrieve the suggested protection policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_suggested_protection_nid(storagepool_suggested_protection_nid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_suggested_protection_nid: Retrieve the suggested protection policy. (required)
        :return: StoragepoolSuggestedProtection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_suggested_protection_nid_with_http_info(storagepool_suggested_protection_nid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_suggested_protection_nid_with_http_info(storagepool_suggested_protection_nid, **kwargs)  # noqa: E501
            return data

    def get_storagepool_suggested_protection_nid_with_http_info(self, storagepool_suggested_protection_nid, **kwargs):  # noqa: E501
        """get_storagepool_suggested_protection_nid  # noqa: E501

        Retrieve the suggested protection policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_suggested_protection_nid_with_http_info(storagepool_suggested_protection_nid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_suggested_protection_nid: Retrieve the suggested protection policy. (required)
        :return: StoragepoolSuggestedProtection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_suggested_protection_nid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_suggested_protection_nid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_suggested_protection_nid' is set
        if ('storagepool_suggested_protection_nid' not in params or
                params['storagepool_suggested_protection_nid'] is None):
            raise ValueError("Missing the required parameter `storagepool_suggested_protection_nid` when calling `get_storagepool_suggested_protection_nid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_suggested_protection_nid' in params:
            path_params['StoragepoolSuggestedProtectionNid'] = params['storagepool_suggested_protection_nid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/suggested-protection/{StoragepoolSuggestedProtectionNid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolSuggestedProtection',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_tier(self, storagepool_tier_id, **kwargs):  # noqa: E501
        """get_storagepool_tier  # noqa: E501

        Retrieve tier information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_tier(storagepool_tier_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_tier_id: Retrieve tier information. (required)
        :return: StoragepoolTiers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_tier_with_http_info(storagepool_tier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_tier_with_http_info(storagepool_tier_id, **kwargs)  # noqa: E501
            return data

    def get_storagepool_tier_with_http_info(self, storagepool_tier_id, **kwargs):  # noqa: E501
        """get_storagepool_tier  # noqa: E501

        Retrieve tier information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_tier_with_http_info(storagepool_tier_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str storagepool_tier_id: Retrieve tier information. (required)
        :return: StoragepoolTiers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_tier_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_tier_id' is set
        if ('storagepool_tier_id' not in params or
                params['storagepool_tier_id'] is None):
            raise ValueError("Missing the required parameter `storagepool_tier_id` when calling `get_storagepool_tier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_tier_id' in params:
            path_params['StoragepoolTierId'] = params['storagepool_tier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/tiers/{StoragepoolTierId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolTiers',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storagepool_unprovisioned(self, **kwargs):  # noqa: E501
        """get_storagepool_unprovisioned  # noqa: E501

        Get the unprovisioned nodes and drives  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_unprovisioned(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolUnprovisioned
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_storagepool_unprovisioned_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_storagepool_unprovisioned_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_storagepool_unprovisioned_with_http_info(self, **kwargs):  # noqa: E501
        """get_storagepool_unprovisioned  # noqa: E501

        Get the unprovisioned nodes and drives  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storagepool_unprovisioned_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolUnprovisioned
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storagepool_unprovisioned" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/unprovisioned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolUnprovisioned',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compatibilities_class_active(self, **kwargs):  # noqa: E501
        """list_compatibilities_class_active  # noqa: E501

        Get a list of active compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compatibilities_class_active(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesClassActiveExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_compatibilities_class_active_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compatibilities_class_active_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compatibilities_class_active_with_http_info(self, **kwargs):  # noqa: E501
        """list_compatibilities_class_active  # noqa: E501

        Get a list of active compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compatibilities_class_active_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesClassActiveExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compatibilities_class_active" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/compatibilities/class/active', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompatibilitiesClassActiveExtended',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compatibilities_ssd_active(self, **kwargs):  # noqa: E501
        """list_compatibilities_ssd_active  # noqa: E501

        Get a list of active ssd compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compatibilities_ssd_active(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesSsdActiveExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_compatibilities_ssd_active_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compatibilities_ssd_active_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compatibilities_ssd_active_with_http_info(self, **kwargs):  # noqa: E501
        """list_compatibilities_ssd_active  # noqa: E501

        Get a list of active ssd compatibilities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_compatibilities_ssd_active_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CompatibilitiesSsdActiveExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compatibilities_ssd_active" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/compatibilities/ssd/active', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompatibilitiesSsdActiveExtended',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_storagepool_nodepools(self, **kwargs):  # noqa: E501
        """list_storagepool_nodepools  # noqa: E501

        List all node pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_storagepool_nodepools(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolNodepoolsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_storagepool_nodepools_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_storagepool_nodepools_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_storagepool_nodepools_with_http_info(self, **kwargs):  # noqa: E501
        """list_storagepool_nodepools  # noqa: E501

        List all node pools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_storagepool_nodepools_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolNodepoolsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_storagepool_nodepools" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/nodepools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolNodepoolsExtended',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_storagepool_tiers(self, **kwargs):  # noqa: E501
        """list_storagepool_tiers  # noqa: E501

        List all tiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_storagepool_tiers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolTiersExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_storagepool_tiers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_storagepool_tiers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_storagepool_tiers_with_http_info(self, **kwargs):  # noqa: E501
        """list_storagepool_tiers  # noqa: E501

        List all tiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_storagepool_tiers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: StoragepoolTiersExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_storagepool_tiers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/tiers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoragepoolTiersExtended',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_compatibilities_ssd_active_by_id(self, compatibilities_ssd_active_id_params, compatibilities_ssd_active_id, **kwargs):  # noqa: E501
        """update_compatibilities_ssd_active_by_id  # noqa: E501

        Modify an ssd compatibility by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_compatibilities_ssd_active_by_id(compatibilities_ssd_active_id_params, compatibilities_ssd_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param CompatibilitiesSsdActiveIdParams compatibilities_ssd_active_id_params: (required)
        :param str compatibilities_ssd_active_id: Modify an ssd compatibility by id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id_params, compatibilities_ssd_active_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id_params, compatibilities_ssd_active_id, **kwargs)  # noqa: E501
            return data

    def update_compatibilities_ssd_active_by_id_with_http_info(self, compatibilities_ssd_active_id_params, compatibilities_ssd_active_id, **kwargs):  # noqa: E501
        """update_compatibilities_ssd_active_by_id  # noqa: E501

        Modify an ssd compatibility by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_compatibilities_ssd_active_by_id_with_http_info(compatibilities_ssd_active_id_params, compatibilities_ssd_active_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param CompatibilitiesSsdActiveIdParams compatibilities_ssd_active_id_params: (required)
        :param str compatibilities_ssd_active_id: Modify an ssd compatibility by id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compatibilities_ssd_active_id_params', 'compatibilities_ssd_active_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_compatibilities_ssd_active_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compatibilities_ssd_active_id_params' is set
        if ('compatibilities_ssd_active_id_params' not in params or
                params['compatibilities_ssd_active_id_params'] is None):
            raise ValueError("Missing the required parameter `compatibilities_ssd_active_id_params` when calling `update_compatibilities_ssd_active_by_id`")  # noqa: E501
        # verify the required parameter 'compatibilities_ssd_active_id' is set
        if ('compatibilities_ssd_active_id' not in params or
                params['compatibilities_ssd_active_id'] is None):
            raise ValueError("Missing the required parameter `compatibilities_ssd_active_id` when calling `update_compatibilities_ssd_active_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compatibilities_ssd_active_id' in params:
            path_params['CompatibilitiesSsdActiveId'] = params['compatibilities_ssd_active_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'compatibilities_ssd_active_id_params' in params:
            body_params = params['compatibilities_ssd_active_id_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storagepool_nodepool(self, storagepool_nodepool, storagepool_nodepool_id, **kwargs):  # noqa: E501
        """update_storagepool_nodepool  # noqa: E501

        Modify node pool. All input fields are optional, but one or more must be supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_storagepool_nodepool(storagepool_nodepool, storagepool_nodepool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolNodepool storagepool_nodepool: (required)
        :param str storagepool_nodepool_id: Modify node pool. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_storagepool_nodepool_with_http_info(storagepool_nodepool, storagepool_nodepool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storagepool_nodepool_with_http_info(storagepool_nodepool, storagepool_nodepool_id, **kwargs)  # noqa: E501
            return data

    def update_storagepool_nodepool_with_http_info(self, storagepool_nodepool, storagepool_nodepool_id, **kwargs):  # noqa: E501
        """update_storagepool_nodepool  # noqa: E501

        Modify node pool. All input fields are optional, but one or more must be supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_storagepool_nodepool_with_http_info(storagepool_nodepool, storagepool_nodepool_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolNodepool storagepool_nodepool: (required)
        :param str storagepool_nodepool_id: Modify node pool. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_nodepool', 'storagepool_nodepool_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storagepool_nodepool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_nodepool' is set
        if ('storagepool_nodepool' not in params or
                params['storagepool_nodepool'] is None):
            raise ValueError("Missing the required parameter `storagepool_nodepool` when calling `update_storagepool_nodepool`")  # noqa: E501
        # verify the required parameter 'storagepool_nodepool_id' is set
        if ('storagepool_nodepool_id' not in params or
                params['storagepool_nodepool_id'] is None):
            raise ValueError("Missing the required parameter `storagepool_nodepool_id` when calling `update_storagepool_nodepool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_nodepool_id' in params:
            path_params['StoragepoolNodepoolId'] = params['storagepool_nodepool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storagepool_nodepool' in params:
            body_params = params['storagepool_nodepool']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storagepool_settings(self, storagepool_settings, **kwargs):  # noqa: E501
        """update_storagepool_settings  # noqa: E501

        Modify one or more settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_storagepool_settings(storagepool_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolSettingsExtended storagepool_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_storagepool_settings_with_http_info(storagepool_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storagepool_settings_with_http_info(storagepool_settings, **kwargs)  # noqa: E501
            return data

    def update_storagepool_settings_with_http_info(self, storagepool_settings, **kwargs):  # noqa: E501
        """update_storagepool_settings  # noqa: E501

        Modify one or more settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_storagepool_settings_with_http_info(storagepool_settings, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolSettingsExtended storagepool_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_settings']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storagepool_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_settings' is set
        if ('storagepool_settings' not in params or
                params['storagepool_settings'] is None):
            raise ValueError("Missing the required parameter `storagepool_settings` when calling `update_storagepool_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storagepool_settings' in params:
            body_params = params['storagepool_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_storagepool_tier(self, storagepool_tier, storagepool_tier_id, **kwargs):  # noqa: E501
        """update_storagepool_tier  # noqa: E501

        Modify tier. All input fields are optional, but one or more must be supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_storagepool_tier(storagepool_tier, storagepool_tier_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolTier storagepool_tier: (required)
        :param str storagepool_tier_id: Modify tier. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_storagepool_tier_with_http_info(storagepool_tier, storagepool_tier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_storagepool_tier_with_http_info(storagepool_tier, storagepool_tier_id, **kwargs)  # noqa: E501
            return data

    def update_storagepool_tier_with_http_info(self, storagepool_tier, storagepool_tier_id, **kwargs):  # noqa: E501
        """update_storagepool_tier  # noqa: E501

        Modify tier. All input fields are optional, but one or more must be supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_storagepool_tier_with_http_info(storagepool_tier, storagepool_tier_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param StoragepoolTier storagepool_tier: (required)
        :param str storagepool_tier_id: Modify tier. All input fields are optional, but one or more must be supplied. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagepool_tier', 'storagepool_tier_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_storagepool_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagepool_tier' is set
        if ('storagepool_tier' not in params or
                params['storagepool_tier'] is None):
            raise ValueError("Missing the required parameter `storagepool_tier` when calling `update_storagepool_tier`")  # noqa: E501
        # verify the required parameter 'storagepool_tier_id' is set
        if ('storagepool_tier_id' not in params or
                params['storagepool_tier_id'] is None):
            raise ValueError("Missing the required parameter `storagepool_tier_id` when calling `update_storagepool_tier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagepool_tier_id' in params:
            path_params['StoragepoolTierId'] = params['storagepool_tier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storagepool_tier' in params:
            body_params = params['storagepool_tier']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/1/storagepool/tiers/{StoragepoolTierId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
